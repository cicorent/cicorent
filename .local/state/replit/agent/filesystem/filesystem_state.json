{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CICO Rent - Vehicle Rental Management System\n\n## Overview\n\nCICO Rent is a full-stack vehicle rental management system built for FGS Gas in Rome, Italy. The application provides a modern web interface for customers to browse and book rental vehicles (cars and vans) with real-time pricing calculation. It includes an admin dashboard for employees to manage bookings, pricing, blackout dates, and generate rental contracts.\n\nThe system features a customer-facing website with vehicle listings, detailed product pages with pricing calculators, and dual booking flows (online booking and phone-based booking). The admin panel allows staff to manage the entire rental operation including inventory, pricing, availability, and customer communications.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client application is built with React 18 and TypeScript using a modern component-based architecture. The UI leverages shadcn/ui components built on Radix UI primitives for accessibility and consistency. State management is handled through React Query (TanStack Query) for server state and React's built-in state management for local component state.\n\nThe routing system uses Wouter for lightweight client-side routing. The application supports responsive design with Tailwind CSS for styling and includes mobile-specific features like direct phone dialing on mobile devices.\n\n### Backend Architecture\nThe server is built with Express.js and TypeScript, following a RESTful API design pattern. The application uses session-based authentication with express-session for admin users, employing bcrypt for password hashing.\n\nThe database layer uses Drizzle ORM with PostgreSQL for type-safe database operations. The schema includes tables for vehicles, bookings, blackout dates, employees, and a booking sequence counter for generating progressive booking codes.\n\n### Database Design\nPostgreSQL database with the following core entities:\n- **Vehicles**: Store vehicle information, pricing, availability quantities, and color options\n- **Bookings**: Customer booking details with comprehensive pricing breakdown and status tracking\n- **Blackout Dates**: Date-specific availability restrictions per vehicle\n- **Employees**: Staff authentication and role management\n- **Booking Sequence**: Progressive booking code generation (format: 08XXXX)\n\nThe schema uses enum types for controlled values (vehicle types, package types, coverage options, booking status) and includes proper foreign key relationships with cascade deletes.\n\n### Pricing Engine\nComplex pricing calculation system that handles:\n- Multi-day rental discounts with tiered pricing\n- Different package types (standard 24h, hourly for vans, weekly/monthly)\n- Kilometer plans and coverage options\n- Additional driver fees with age-based pricing\n- Home delivery/pickup services\n- Real-time quote generation with detailed breakdowns\n\n### Authentication & Authorization\nSession-based authentication for admin users with role-based access control (STAFF/ADMIN roles). The system uses secure session configuration with httpOnly cookies and CSRF protection.\n\n### Email Integration\nAutomated email system using Nodemailer with SMTP configuration for:\n- Customer booking confirmations with detailed booking information\n- Admin notifications for new bookings\n- Email templates with booking codes and pricing details\n\n### PDF Generation\nContract generation system using HTML templates with placeholder replacement. The system is designed to integrate with Puppeteer for PDF generation from HTML templates.\n\n### File Structure\nThe application follows a monorepo structure with shared types and schemas:\n- `/client` - React frontend application\n- `/server` - Express.js backend\n- `/shared` - Shared TypeScript types and Drizzle schemas\n- Clear separation of concerns with dedicated service layers\n\n## External Dependencies\n\n### Database\n- **Neon Database**: PostgreSQL hosting with connection pooling via `@neondatabase/serverless`\n- **Drizzle ORM**: Type-safe database queries and migrations\n\n### UI Components\n- **Radix UI**: Headless UI component primitives for accessibility\n- **shadcn/ui**: Pre-built component library built on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework for styling\n\n### Authentication\n- **bcrypt**: Password hashing for admin users\n- **express-session**: Session management with configurable storage\n\n### Email Services\n- **Nodemailer**: Email sending via SMTP (configured for Aruba hosting)\n- SMTP configuration: `smtps.aruba.it:465` with SSL\n\n### State Management\n- **TanStack React Query**: Server state management, caching, and synchronization\n- **React Hook Form**: Form state management with validation\n- **Zod**: Runtime type validation and schema validation\n\n### Development Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Styling & Icons\n- **Font Awesome**: Icon library for UI elements\n- **Google Fonts**: Inter font family for typography\n- **CSS Variables**: Theme-based color system with brand colors\n\n### Utilities\n- **date-fns**: Date manipulation and formatting\n- **clsx**: Conditional className utility\n- **nanoid**: Unique ID generation\n\nThe system is designed to run on Replit with specific plugins and configurations for the development environment, including runtime error overlays and cartographer integration for debugging.","size_bytes":5542},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"var(--cico-blue-50)\",\n          100: \"var(--cico-blue-100)\",\n          500: \"var(--cico-blue-500)\",\n          600: \"var(--cico-blue-600)\",\n          700: \"var(--cico-blue-700)\",\n          800: \"var(--cico-blue-800)\",\n          900: \"var(--cico-blue-900)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        blue: {\n          50: \"var(--cico-blue-50)\",\n          100: \"var(--cico-blue-100)\",\n          500: \"var(--cico-blue-500)\",\n          600: \"var(--cico-blue-600)\",\n          700: \"var(--cico-blue-700)\",\n          800: \"var(--cico-blue-800)\",\n          900: \"var(--cico-blue-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        slideUp: {\n          from: { opacity: \"0\", transform: \"translateY(30px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        scaleIn: {\n          from: { opacity: \"0\", transform: \"scale(0.95)\" },\n          to: { opacity: \"1\", transform: \"scale(1)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n        \"slide-up\": \"slideUp 0.6s ease-out\",\n        \"scale-in\": \"scaleIn 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3866},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { computeQuote } from \"./services/pricingService\";\nimport { sendBookingConfirmationToCustomer, sendBookingNotificationToAdmin } from \"./services/emailService\";\nimport { generateContract } from \"./services/pdfService\";\nimport { authenticateEmployee, requireAdmin, loginEmployee } from \"./middleware/auth\";\nimport { quoteInputSchema, insertBookingSchema } from \"@shared/schema\";\nimport session from \"express-session\";\nimport bcrypt from \"bcrypt\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'cico-rent-secret',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Public API routes\n\n  // Get all vehicles\n  app.get('/api/vehicles', async (req, res) => {\n    try {\n      const vehicles = await storage.getVehicles();\n      res.json(vehicles);\n    } catch (error) {\n      console.error('Error fetching vehicles:', error);\n      res.status(500).json({ message: 'Errore nel recupero dei veicoli' });\n    }\n  });\n\n  // Get vehicle by ID\n  app.get('/api/vehicles/:id', async (req, res) => {\n    try {\n      const vehicle = await storage.getVehicle(req.params.id);\n      if (!vehicle) {\n        return res.status(404).json({ message: 'Veicolo non trovato' });\n      }\n      res.json(vehicle);\n    } catch (error) {\n      console.error('Error fetching vehicle:', error);\n      res.status(500).json({ message: 'Errore nel recupero del veicolo' });\n    }\n  });\n\n  // Check vehicle availability\n  app.get('/api/vehicles/:vehicleId/availability', async (req, res) => {\n    try {\n      const { vehicleId } = req.params;\n      const { from, to } = req.query;\n\n      if (!from || !to) {\n        return res.status(400).json({ message: 'Parametri from e to richiesti' });\n      }\n\n      const availability = await storage.getVehicleAvailability(\n        vehicleId,\n        from as string,\n        to as string\n      );\n\n      res.json(availability);\n    } catch (error) {\n      console.error('Error checking availability:', error);\n      res.status(500).json({ message: 'Errore nel controllo disponibilità' });\n    }\n  });\n\n  // Get vehicle availability with specific date range (for legacy compatibility)\n  app.get('/api/vehicles/:id/availability/:startDate/:endDate', async (req, res) => {\n    try {\n      const { id, startDate, endDate } = req.params;\n      const availability = await storage.getVehicleAvailability(id, startDate, endDate);\n      res.json(availability);\n    } catch (error) {\n      console.error('Error getting vehicle availability:', error);\n      res.status(500).json({ message: 'Errore nel recupero della disponibilità' });\n    }\n  });\n\n  // Get fully booked dates for a vehicle\n  app.get('/api/vehicles/:id/fully-booked', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const fullyBookedDates = await storage.getFullyBookedDates(id);\n      res.json(fullyBookedDates);\n    } catch (error) {\n      console.error('Error getting fully booked dates:', error);\n      res.status(500).json({ message: 'Errore nel recupero delle date non disponibili' });\n    }\n  });\n\n  // Calculate quote\n  app.get('/api/quote', async (req, res) => {\n    try {\n      const quote = await storage.calculateQuote(req.query);\n      res.json(quote);\n    } catch (error) {\n      console.error('Error calculating quote:', error);\n      res.status(500).json({ message: 'Errore nel calcolo del preventivo' });\n    }\n  });\n\n  // Create booking\n  app.post('/api/bookings', async (req, res) => {\n    try {\n      // Validate input\n      const bookingData = insertBookingSchema.parse(req.body);\n      \n      // Get vehicle\n      const vehicle = await storage.getVehicle(bookingData.vehicleId);\n      if (!vehicle) {\n        return res.status(404).json({ message: 'Veicolo non trovato' });\n      }\n\n      // Check availability\n      const availability = await storage.getVehicleAvailability(\n        bookingData.vehicleId,\n        bookingData.startDate,\n        bookingData.endDate\n      );\n\n      if (availability.availableQuantity <= 0) {\n        return res.status(400).json({ message: 'Veicolo non disponibile nel periodo selezionato' });\n      }\n\n      if (availability.blackoutDates.length > 0) {\n        return res.status(400).json({ \n          message: 'Il periodo selezionato include date non disponibili',\n          blackoutDates: availability.blackoutDates\n        });\n      }\n\n      // Calculate pricing\n      const quoteInput = {\n        vehicleId: bookingData.vehicleId,\n        startDate: bookingData.startDate,\n        endDate: bookingData.endDate,\n        packageType: bookingData.packageType,\n        kmPlan: bookingData.kmPlan,\n        coverage: bookingData.coverage,\n        extraDriver: bookingData.extraDriver || false,\n        extraDriverUnder25: bookingData.extraDriverUnder25 || false,\n        homeDelivery: bookingData.homeDelivery || false,\n        homePickup: bookingData.homePickup || false,\n      };\n\n      const quote = computeQuote(quoteInput, Number(vehicle.basePriceDay), vehicle.type);\n\n      // Generate booking code\n      const bookingCode = await storage.getNextBookingCode();\n\n      // Create booking\n      const booking = await storage.createBooking({\n        ...bookingData,\n        bookingCode,\n        totalPrice: quote.total,\n        discountEuroShown: quote.discountEuroShown,\n        discountPctShown: quote.discountPctShown,\n      });\n\n      // Send emails (skip if SMTP credentials not configured)\n      const fullBooking = { ...booking, vehicle };\n      try {\n        await Promise.all([\n          sendBookingConfirmationToCustomer(fullBooking),\n          sendBookingNotificationToAdmin(fullBooking)\n        ]);\n      } catch (emailError) {\n        console.warn('Email sending failed, but booking was created successfully:', emailError);\n        // Continue with booking creation even if emails fail\n      }\n\n      res.json({ \n        booking,\n        message: 'Prenotazione creata con successo. Riceverai una chiamata da una nostra operatrice in giornata.' \n      });\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Dati non validi', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Errore nella creazione della prenotazione' });\n    }\n  });\n\n  // Admin authentication routes\n\n  // Login\n  app.post('/api/admin/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      if (!username || !password) {\n        return res.status(400).json({ message: 'Username e password richiesti' });\n      }\n\n      const employee = await loginEmployee(username, password);\n      if (!employee) {\n        return res.status(401).json({ message: 'Credenziali non valide' });\n      }\n\n      (req.session as any).employeeId = employee.id;\n      (req.session as any).role = employee.role;\n\n      res.json({\n        id: employee.id,\n        username: employee.username,\n        role: employee.role,\n      });\n    } catch (error) {\n      console.error('Error during login:', error);\n      res.status(500).json({ message: 'Errore durante il login' });\n    }\n  });\n\n  // Logout\n  app.post('/api/admin/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: 'Errore durante il logout' });\n      }\n      res.json({ message: 'Logout effettuato' });\n    });\n  });\n\n  // Check auth status\n  app.get('/api/admin/me', authenticateEmployee, (req, res) => {\n    res.json({\n      id: req.user!.id,\n      username: req.user!.username,\n      role: req.user!.role,\n    });\n  });\n\n  // Protected admin routes\n\n  // Get all bookings\n  app.get('/api/admin/bookings', authenticateEmployee, async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      res.json(bookings);\n    } catch (error) {\n      console.error('Error fetching bookings:', error);\n      res.status(500).json({ message: 'Errore nel recupero delle prenotazioni' });\n    }\n  });\n\n  // Update booking\n  app.patch('/api/admin/bookings/:id', authenticateEmployee, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      // If price-related fields are updated, recalculate pricing\n      if (updates.packageType || updates.kmPlan || updates.coverage || \n          updates.extraDriver !== undefined || updates.extraDriverUnder25 !== undefined ||\n          updates.homeDelivery !== undefined || updates.homePickup !== undefined) {\n        \n        const booking = await storage.getBooking(id);\n        if (!booking) {\n          return res.status(404).json({ message: 'Prenotazione non trovata' });\n        }\n\n        const quoteInput = {\n          vehicleId: booking.vehicleId,\n          startDate: updates.startDate || booking.startDate,\n          endDate: updates.endDate || booking.endDate,\n          packageType: updates.packageType || booking.packageType,\n          kmPlan: updates.kmPlan || booking.kmPlan,\n          coverage: updates.coverage || booking.coverage,\n          extraDriver: updates.extraDriver ?? booking.extraDriver,\n          extraDriverUnder25: updates.extraDriverUnder25 ?? booking.extraDriverUnder25,\n          homeDelivery: updates.homeDelivery ?? booking.homeDelivery,\n          homePickup: updates.homePickup ?? booking.homePickup,\n        };\n\n        const quote = computeQuote(quoteInput, Number(booking.vehicle.basePriceDay), booking.vehicle.type);\n        \n        updates.totalPrice = quote.total;\n        updates.discountEuroShown = quote.discountEuroShown;\n        updates.discountPctShown = quote.discountPctShown;\n      }\n\n      const updatedBooking = await storage.updateBooking(id, updates);\n      res.json(updatedBooking);\n    } catch (error) {\n      console.error('Error updating booking:', error);\n      res.status(500).json({ message: 'Errore nell\\'aggiornamento della prenotazione' });\n    }\n  });\n\n  // Delete booking\n  app.delete('/api/admin/bookings/:id', authenticateEmployee, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteBooking(id);\n      res.json({ message: 'Prenotazione cancellata' });\n    } catch (error) {\n      console.error('Error deleting booking:', error);\n      res.status(500).json({ message: 'Errore nella cancellazione della prenotazione' });\n    }\n  });\n\n  // Generate contract PDF\n  app.get('/api/admin/bookings/:id/contract', authenticateEmployee, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const booking = await storage.getBooking(id);\n      \n      if (!booking) {\n        return res.status(404).json({ message: 'Prenotazione non trovata' });\n      }\n\n      const pdf = await generateContract(booking);\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"Contratto-${booking.bookingCode}.pdf\"`);\n      res.send(pdf);\n    } catch (error) {\n      console.error('Error generating contract:', error);\n      res.status(500).json({ message: 'Errore nella generazione del contratto' });\n    }\n  });\n\n  // Blackout dates routes\n  app.get('/api/blackout-dates/:vehicleId', async (req, res) => {\n    try {\n      const { vehicleId } = req.params;\n      const blackoutDates = await storage.getBlackoutDates(vehicleId);\n      res.json(blackoutDates);\n    } catch (error) {\n      console.error('Error fetching blackout dates:', error);\n      res.status(500).json({ message: 'Errore nel recupero delle date bloccate' });\n    }\n  });\n\n  app.post('/api/blackout-dates', authenticateEmployee, async (req, res) => {\n    try {\n      const blackoutData = req.body;\n      const blackout = await storage.createBlackoutDate(blackoutData);\n      res.json(blackout);\n    } catch (error) {\n      console.error('Error creating blackout date:', error);\n      res.status(500).json({ message: 'Errore nella creazione della data bloccata' });\n    }\n  });\n\n  app.delete('/api/blackout-dates/:id', authenticateEmployee, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteBlackoutDate(id);\n      res.json({ message: 'Data bloccata rimossa' });\n    } catch (error) {\n      console.error('Error deleting blackout date:', error);\n      res.status(500).json({ message: 'Errore nella rimozione della data bloccata' });\n    }\n  });\n\n  // Admin-only routes\n\n  // Update vehicle prices\n  app.patch('/api/admin/vehicles/:id', authenticateEmployee, requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const vehicle = await storage.updateVehicle(id, updates);\n      res.json(vehicle);\n    } catch (error) {\n      console.error('Error updating vehicle:', error);\n      res.status(500).json({ message: 'Errore nell\\'aggiornamento del veicolo' });\n    }\n  });\n\n  // Blackout date management\n  app.get('/api/admin/vehicles/:vehicleId/blackout', authenticateEmployee, async (req, res) => {\n    try {\n      const { vehicleId } = req.params;\n      const blackouts = await storage.getBlackoutDates(vehicleId);\n      res.json(blackouts);\n    } catch (error) {\n      console.error('Error fetching blackout dates:', error);\n      res.status(500).json({ message: 'Errore nel recupero delle date di blackout' });\n    }\n  });\n\n  app.post('/api/admin/vehicles/:vehicleId/blackout', authenticateEmployee, requireAdmin, async (req, res) => {\n    try {\n      const { vehicleId } = req.params;\n      const { date } = req.body;\n      \n      if (!date) {\n        return res.status(400).json({ message: 'Data richiesta' });\n      }\n\n      const blackout = await storage.createBlackoutDate({ vehicleId, date });\n      res.json(blackout);\n    } catch (error) {\n      console.error('Error creating blackout date:', error);\n      res.status(500).json({ message: 'Errore nella creazione della data di blackout' });\n    }\n  });\n\n  app.delete('/api/admin/blackout/:id', authenticateEmployee, requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteBlackoutDate(id);\n      res.json({ message: 'Data di blackout rimossa' });\n    } catch (error) {\n      console.error('Error deleting blackout date:', error);\n      res.status(500).json({ message: 'Errore nella rimozione della data di blackout' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14672},"server/seed.ts":{"content":"import { db } from './db';\nimport { vehicles, employees, bookingSequence } from '@shared/schema';\nimport bcrypt from 'bcrypt';\n\nasync function seedDatabase() {\n  console.log('🌱 Starting database seed...');\n\n  try {\n    // Clear existing data\n    console.log('Clearing existing data...');\n    await db.delete(vehicles);\n    await db.delete(employees);\n    await db.delete(bookingSequence);\n\n    // Seed vehicles\n    console.log('Seeding vehicles...');\n    await db.insert(vehicles).values([\n      {\n        name: 'Fiat 500',\n        slug: 'fiat-500',\n        type: 'CAR',\n        basePriceDay: '35',\n        quantity: 3,\n        availableQuantity: 3,\n        colorOptions: ['Bianco', 'Nero', 'Rosso'],\n        seats: 4,\n        transmission: 'MANUAL',\n        fuelType: 'GASOLINE',\n        imageUrl: 'https://images.unsplash.com/photo-1583121274602-3e2820c69888?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      },\n      {\n        name: 'Volkswagen Golf',\n        slug: 'volkswagen-golf',\n        type: 'CAR',\n        basePriceDay: '42',\n        quantity: 2,\n        availableQuantity: 2,\n        colorOptions: ['Grigio', 'Nero', 'Bianco'],\n        seats: 5,\n        transmission: 'MANUAL',\n        fuelType: 'DIESEL',\n        imageUrl: 'https://images.unsplash.com/photo-1606664515524-ed2f786a0bd6?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      },\n      {\n        name: 'Ford Transit',\n        slug: 'ford-transit',\n        type: 'VAN',\n        basePriceDay: '65',\n        quantity: 2,\n        availableQuantity: 2,\n        colorOptions: ['Bianco', 'Grigio'],\n        seats: 3,\n        transmission: 'MANUAL',\n        fuelType: 'DIESEL',\n        imageUrl: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      },\n    ]);\n\n    // Seed employees\n    console.log('Seeding employees...');\n    const adminPassword = await bcrypt.hash('admin123', 10);\n    const staffPassword = await bcrypt.hash('staff123', 10);\n\n    await db.insert(employees).values([\n      {\n        username: 'admin',\n        password: adminPassword,\n        role: 'ADMIN',\n      },\n      {\n        username: 'staff',\n        password: staffPassword,\n        role: 'STAFF',\n      },\n    ]);\n\n    // Initialize booking sequence\n    console.log('Initializing booking sequence...');\n    await db.insert(bookingSequence).values([\n      {\n        lastValue: 0,\n      },\n    ]);\n\n    console.log('✅ Database seeded successfully!');\n  } catch (error) {\n    console.error('❌ Error seeding database:', error);\n    process.exit(1);\n  }\n}\n\n// Run the seed if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase().then(() => {\n    process.exit(0);\n  });\n}\n\nexport { seedDatabase };","size_bytes":2766},"server/storage.ts":{"content":"import { \n  vehicles, \n  bookings, \n  blackoutDates, \n  employees,\n  bookingSequence,\n  type Vehicle, \n  type InsertVehicle,\n  type UpdateVehicle,\n  type Booking, \n  type InsertBooking,\n  type UpdateBooking,\n  type BlackoutDate,\n  type InsertBlackoutDate,\n  type Employee,\n  type InsertEmployee\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, desc, sql, between } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Vehicle operations\n  getVehicles(): Promise<Vehicle[]>;\n  getVehicle(id: string): Promise<Vehicle | undefined>;\n  getVehicleBySlug(slug: string): Promise<Vehicle | undefined>;\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  updateVehicle(id: string, vehicle: UpdateVehicle): Promise<Vehicle>;\n  \n  // Booking operations\n  getBookings(): Promise<(Booking & { vehicle: Vehicle })[]>;\n  getBooking(id: string): Promise<(Booking & { vehicle: Vehicle }) | undefined>;\n  createBooking(booking: InsertBooking & { bookingCode: string; totalPrice: number; discountEuroShown: number; discountPctShown: number }): Promise<Booking>;\n  updateBooking(id: string, booking: UpdateBooking): Promise<Booking>;\n  deleteBooking(id: string): Promise<void>;\n  getNextBookingCode(): Promise<string>;\n  \n  // Availability operations\n  getVehicleAvailability(vehicleId: string, startDate?: string, endDate?: string): Promise<{ availableQuantity: number; blackoutDates: string[] }>;\n  calculateQuote(queryParams: any): Promise<any>;\n  \n  // Blackout operations\n  getBlackoutDates(vehicleId: string): Promise<BlackoutDate[]>;\n  createBlackoutDate(blackout: InsertBlackoutDate): Promise<BlackoutDate>;\n  deleteBlackoutDate(id: string): Promise<void>;\n  \n  // Employee operations\n  getEmployee(id: string): Promise<Employee | undefined>;\n  getEmployeeByUsername(username: string): Promise<Employee | undefined>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getVehicles(): Promise<Vehicle[]> {\n    return await db.select().from(vehicles).orderBy(vehicles.name);\n  }\n\n  async getVehicle(id: string): Promise<Vehicle | undefined> {\n    const [vehicle] = await db.select().from(vehicles).where(eq(vehicles.id, id));\n    return vehicle;\n  }\n\n  async getVehicleBySlug(slug: string): Promise<Vehicle | undefined> {\n    const [vehicle] = await db.select().from(vehicles).where(eq(vehicles.slug, slug));\n    return vehicle;\n  }\n\n  async createVehicle(vehicle: InsertVehicle): Promise<Vehicle> {\n    const [newVehicle] = await db.insert(vehicles).values(vehicle).returning();\n    return newVehicle;\n  }\n\n  async updateVehicle(id: string, vehicle: UpdateVehicle): Promise<Vehicle> {\n    const [updatedVehicle] = await db\n      .update(vehicles)\n      .set({ ...vehicle, updatedAt: new Date() })\n      .where(eq(vehicles.id, id))\n      .returning();\n    return updatedVehicle;\n  }\n\n  async getBookings(): Promise<(Booking & { vehicle: Vehicle })[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .leftJoin(vehicles, eq(bookings.vehicleId, vehicles.id))\n      .orderBy(desc(bookings.createdAt))\n      .then(rows => rows.map(row => ({ ...row.bookings, vehicle: row.vehicles! })));\n  }\n\n  async getBooking(id: string): Promise<(Booking & { vehicle: Vehicle }) | undefined> {\n    const [result] = await db\n      .select()\n      .from(bookings)\n      .leftJoin(vehicles, eq(bookings.vehicleId, vehicles.id))\n      .where(eq(bookings.id, id));\n    \n    if (!result) return undefined;\n    return { ...result.bookings, vehicle: result.vehicles! };\n  }\n\n  async createBooking(booking: InsertBooking & { bookingCode: string; totalPrice: number; discountEuroShown: number; discountPctShown: number }): Promise<Booking> {\n    const bookingData = {\n      ...booking,\n      totalPrice: booking.totalPrice.toString(),\n      discountEuroShown: booking.discountEuroShown.toString(),\n      discountPctShown: booking.discountPctShown.toString()\n    };\n    const [newBooking] = await db.insert(bookings).values(bookingData).returning();\n    return newBooking;\n  }\n\n  async updateBooking(id: string, booking: UpdateBooking): Promise<Booking> {\n    const [updatedBooking] = await db\n      .update(bookings)\n      .set({ ...booking, updatedAt: new Date() })\n      .where(eq(bookings.id, id))\n      .returning();\n    return updatedBooking;\n  }\n\n  async deleteBooking(id: string): Promise<void> {\n    await db.delete(bookings).where(eq(bookings.id, id));\n  }\n\n  async getNextBookingCode(): Promise<string> {\n    return await db.transaction(async (tx) => {\n      // Get or create the sequence\n      let [sequence] = await tx.select().from(bookingSequence).limit(1);\n      \n      if (!sequence) {\n        [sequence] = await tx.insert(bookingSequence).values({ lastValue: 1 }).returning();\n      } else {\n        [sequence] = await tx\n          .update(bookingSequence)\n          .set({ lastValue: sequence.lastValue + 1 })\n          .where(eq(bookingSequence.id, sequence.id))\n          .returning();\n      }\n      \n      return `08${sequence.lastValue.toString().padStart(4, '0')}`;\n    });\n  }\n\n  async getVehicleAvailability(vehicleId: string, startDate?: string, endDate?: string): Promise<{ availableQuantity: number; blackoutDates: string[] }> {\n    const vehicle = await this.getVehicle(vehicleId);\n    if (!vehicle) {\n      return { availableQuantity: 0, blackoutDates: [] };\n    }\n\n    // Get blackout dates in the date range\n    const blackoutConditions = [eq(blackoutDates.vehicleId, vehicleId)];\n    if (startDate && endDate) {\n      blackoutConditions.push(between(blackoutDates.date, startDate, endDate));\n    }\n    \n    const blackouts = await db\n      .select()\n      .from(blackoutDates)\n      .where(and(...blackoutConditions));\n\n    // Get overlapping bookings\n    let overlappingBookings: any[] = [];\n    if (startDate && endDate) {\n      overlappingBookings = await db\n        .select()\n        .from(bookings)\n        .where(\n          and(\n            eq(bookings.vehicleId, vehicleId),\n            sql`${bookings.startDate} <= ${endDate}`,\n            sql`${bookings.endDate} >= ${startDate}`,\n            sql`${bookings.status} IN ('PENDING', 'CONFIRMED')`\n          )\n        );\n    }\n\n    const bookedQuantity = overlappingBookings.length;\n    const availableQuantity = Math.max(0, vehicle.quantity - bookedQuantity);\n\n    return {\n      availableQuantity,\n      blackoutDates: blackouts.map(b => b.date)\n    };\n  }\n\n  // New method to get fully booked dates for a specific vehicle model\n  async getFullyBookedDates(vehicleId: string): Promise<string[]> {\n    const vehicle = await this.getVehicle(vehicleId);\n    if (!vehicle) return [];\n\n    // Get all bookings for this vehicle for the next 3 months\n    const today = new Date();\n    const threeMonthsFromNow = new Date(today.getTime() + 90 * 24 * 60 * 60 * 1000);\n    \n    const allBookings = await db\n      .select()\n      .from(bookings)\n      .where(\n        and(\n          eq(bookings.vehicleId, vehicleId),\n          sql`${bookings.status} IN ('PENDING', 'CONFIRMED')`,\n          sql`${bookings.startDate} <= ${threeMonthsFromNow.toISOString().split('T')[0]}`,\n          sql`${bookings.endDate} >= ${today.toISOString().split('T')[0]}`\n        )\n      );\n\n    // Group bookings by date and count them\n    const dateBookingCounts: { [key: string]: number } = {};\n    \n    for (const booking of allBookings) {\n      const startDate = new Date(booking.startDate);\n      const endDate = new Date(booking.endDate);\n      \n      // Count each day in the booking period\n      for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n        const dateStr = d.toISOString().split('T')[0];\n        dateBookingCounts[dateStr] = (dateBookingCounts[dateStr] || 0) + 1;\n      }\n    }\n\n    // Return dates where bookings >= vehicle quantity\n    return Object.keys(dateBookingCounts).filter(date => \n      dateBookingCounts[date] >= vehicle.quantity\n    );\n  }\n\n  async getBlackoutDates(vehicleId: string): Promise<BlackoutDate[]> {\n    return await db\n      .select()\n      .from(blackoutDates)\n      .where(eq(blackoutDates.vehicleId, vehicleId))\n      .orderBy(blackoutDates.date);\n  }\n\n  async createBlackoutDate(blackout: InsertBlackoutDate): Promise<BlackoutDate> {\n    const [newBlackout] = await db.insert(blackoutDates).values(blackout).returning();\n    return newBlackout;\n  }\n\n  async deleteBlackoutDate(id: string): Promise<void> {\n    await db.delete(blackoutDates).where(eq(blackoutDates.id, id));\n  }\n\n  async getEmployee(id: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.id, id));\n    return employee;\n  }\n\n  async getEmployeeByUsername(username: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.username, username));\n    return employee;\n  }\n\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const [newEmployee] = await db.insert(employees).values(employee).returning();\n    return newEmployee;\n  }\n\n  async calculateQuote(queryParams: any): Promise<any> {\n    const { vehicleId, startDate, endDate, packageType = 'STANDARD_24H', kmPlan = 'KM_100', coverage = 'BASE', extraDriver = false, extraDriverUnder25 = false, homeDelivery = false, homePickup = false } = queryParams;\n    \n    const vehicle = await this.getVehicle(vehicleId);\n    if (!vehicle) {\n      throw new Error('Vehicle not found');\n    }\n\n    const days = Math.ceil((new Date(endDate).getTime() - new Date(startDate).getTime()) / (1000 * 60 * 60 * 24));\n    const basePrice = parseFloat(vehicle.basePriceDay);\n    \n    let baseTotal = basePrice * days;\n    \n    // Apply multi-day discounts\n    let discountPct = 0;\n    if (days >= 7 && days < 15) discountPct = 10;\n    else if (days >= 15 && days < 30) discountPct = 15;\n    else if (days >= 30) discountPct = 20;\n    \n    const discountEuro = Math.round((baseTotal * discountPct) / 100);\n    baseTotal = baseTotal - discountEuro;\n    \n    // Calculate extras\n    const extras: Array<{ name: string; price: number }> = [];\n    \n    if (coverage === 'PARTIAL') {\n      extras.push({ name: 'Copertura Parziale', price: 15 * days });\n    }\n    \n    if (extraDriver) {\n      const extraDriverCost = extraDriverUnder25 ? 15 * days : 5 * days;\n      extras.push({ name: extraDriverUnder25 ? 'Guidatore Aggiuntivo Under 25' : 'Guidatore Aggiuntivo', price: extraDriverCost });\n    }\n    \n    if (homeDelivery) {\n      extras.push({ name: 'Consegna a Domicilio', price: 25 });\n    }\n    \n    if (homePickup) {\n      extras.push({ name: 'Ritiro a Domicilio', price: 25 });\n    }\n    \n    const extrasTotal = extras.reduce((sum, extra) => sum + extra.price, 0);\n    const total = baseTotal + extrasTotal;\n    \n    return {\n      days,\n      baseTotal: baseTotal.toFixed(2),\n      discountPct,\n      discountEuro: discountEuro.toFixed(2),\n      extras,\n      total: total.toFixed(2),\n      packageType,\n      kmPlan,\n      coverage,\n      extraDriver,\n      extraDriverUnder25,\n      homeDelivery,\n      homePickup\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11148},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  decimal, \n  integer, \n  boolean, \n  timestamp, \n  date,\n  pgEnum,\n  serial\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const vehicleTypeEnum = pgEnum(\"vehicle_type\", [\"VAN\", \"CAR\"]);\nexport const packageTypeEnum = pgEnum(\"package_type\", [\"STANDARD_24H\", \"VAN_4H\", \"VAN_10H\", \"WEEKLY\", \"MONTHLY\"]);\nexport const kmPlanEnum = pgEnum(\"km_plan\", [\"KM_100\", \"KM_200\", \"UNLIMITED\"]);\nexport const coverageEnum = pgEnum(\"coverage\", [\"BASE\", \"PARTIAL\"]);\nexport const bookingStatusEnum = pgEnum(\"booking_status\", [\"PENDING\", \"CONFIRMED\", \"CANCELLED\"]);\nexport const roleEnum = pgEnum(\"role\", [\"STAFF\", \"ADMIN\"]);\n\n// Booking sequence table for progressive codes\nexport const bookingSequence = pgTable(\"booking_sequence\", {\n  id: serial(\"id\").primaryKey(),\n  lastValue: integer(\"last_value\").default(0).notNull(),\n});\n\n// Vehicles table\nexport const vehicles = pgTable(\"vehicles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: varchar(\"slug\").unique().notNull(),\n  type: vehicleTypeEnum(\"type\").notNull(),\n  basePriceDay: decimal(\"base_price_day\", { precision: 10, scale: 2 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  availableQuantity: integer(\"available_quantity\").notNull(),\n  colorOptions: text(\"color_options\").array().notNull(),\n  seats: integer(\"seats\").notNull(),\n  transmission: varchar(\"transmission\", { length: 10 }).notNull(),\n  fuelType: varchar(\"fuel_type\", { length: 10 }).notNull(),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Blackout dates table\nexport const blackoutDates = pgTable(\"blackout_dates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vehicleId: varchar(\"vehicle_id\").notNull().references(() => vehicles.id, { onDelete: \"cascade\" }),\n  date: date(\"date\").notNull(),\n}, (table) => ({\n  uniqueVehicleDate: sql`UNIQUE(${table.vehicleId}, ${table.date})`,\n}));\n\n// Bookings table\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookingCode: varchar(\"booking_code\").unique().notNull(),\n  vehicleId: varchar(\"vehicle_id\").notNull().references(() => vehicles.id),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  daysCount: integer(\"days_count\").notNull(),\n  packageType: packageTypeEnum(\"package_type\").notNull(),\n  kmPlan: kmPlanEnum(\"km_plan\").notNull(),\n  coverage: coverageEnum(\"coverage\").notNull(),\n  extraDriver: boolean(\"extra_driver\").default(false).notNull(),\n  extraDriverUnder25: boolean(\"extra_driver_under25\").default(false).notNull(),\n  homeDelivery: boolean(\"home_delivery\").default(false).notNull(),\n  homePickup: boolean(\"home_pickup\").default(false).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  discountEuroShown: decimal(\"discount_euro_shown\", { precision: 10, scale: 2 }).notNull(),\n  discountPctShown: decimal(\"discount_pct_shown\", { precision: 5, scale: 2 }).notNull(),\n  customerFirstName: text(\"customer_first_name\").notNull(),\n  customerLastName: text(\"customer_last_name\").notNull(),\n  customerBirthDate: date(\"customer_birth_date\").notNull(),\n  customerPhone: text(\"customer_phone\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  driverLicenseNo: text(\"driver_license_no\").notNull(),\n  addFirstName: text(\"add_first_name\"),\n  addLastName: text(\"add_last_name\"),\n  addBirthDate: date(\"add_birth_date\"),\n  addDriverLicenseNo: text(\"add_driver_license_no\"),\n  notes: text(\"notes\"),\n  status: bookingStatusEnum(\"status\").default(\"PENDING\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Employees table\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").unique().notNull(),\n  password: text(\"password\").notNull(),\n  role: roleEnum(\"role\").default(\"STAFF\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const vehiclesRelations = relations(vehicles, ({ many }) => ({\n  bookings: many(bookings),\n  blackoutDates: many(blackoutDates),\n}));\n\nexport const blackoutDatesRelations = relations(blackoutDates, ({ one }) => ({\n  vehicle: one(vehicles, {\n    fields: [blackoutDates.vehicleId],\n    references: [vehicles.id],\n  }),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  vehicle: one(vehicles, {\n    fields: [bookings.vehicleId],\n    references: [vehicles.id],\n  }),\n}));\n\n// Schemas\nexport const insertVehicleSchema = createInsertSchema(vehicles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  bookingCode: true,\n  totalPrice: true,\n  discountEuroShown: true,\n  discountPctShown: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBlackoutDateSchema = createInsertSchema(blackoutDates).omit({\n  id: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateVehicleSchema = insertVehicleSchema.partial();\nexport const updateBookingSchema = insertBookingSchema.partial();\n\n// Types\nexport type Vehicle = typeof vehicles.$inferSelect;\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\nexport type UpdateVehicle = z.infer<typeof updateVehicleSchema>;\n\nexport type BlackoutDate = typeof blackoutDates.$inferSelect;\nexport type InsertBlackoutDate = z.infer<typeof insertBlackoutDateSchema>;\n\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type UpdateBooking = z.infer<typeof updateBookingSchema>;\n\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\n\n// Quote calculation input type\nexport const quoteInputSchema = z.object({\n  vehicleId: z.string(),\n  startDate: z.string(),\n  endDate: z.string(),\n  packageType: z.enum([\"STANDARD_24H\", \"VAN_4H\", \"VAN_10H\", \"WEEKLY\", \"MONTHLY\"]),\n  kmPlan: z.enum([\"KM_100\", \"KM_200\", \"UNLIMITED\"]),\n  coverage: z.enum([\"BASE\", \"PARTIAL\"]),\n  extraDriver: z.boolean().default(false),\n  extraDriverUnder25: z.boolean().default(false),\n  homeDelivery: z.boolean().default(false),\n  homePickup: z.boolean().default(false),\n});\n\nexport type QuoteInput = z.infer<typeof quoteInputSchema>;\n\nexport interface QuoteResult {\n  total: number;\n  breakdown: {\n    baseWithDiscount: number;\n    km: number;\n    extra: number;\n    delivery: number;\n  };\n  discountEuroShown: number;\n  discountPctShown: number;\n  daysCount: number;\n}\n","size_bytes":7040},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport HomePage from \"@/pages/HomePage\";\nimport VehicleDetailPage from \"@/pages/VehicleDetailPage\";\n\nimport AdminPage from \"@/pages/AdminPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/veicoli/:vehicleId\" component={VehicleDetailPage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":939},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(213 78% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(213 78% 58%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(213 78% 58%);\n  --chart-1: hsl(213 78% 58%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(213 78% 58%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(213 78% 58%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(213 78% 58%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.8rem;\n  \n  /* CICO Rent brand colors */\n  --cico-primary: hsl(224 89% 49%);\n  --cico-primary-dark: hsl(224 89% 39%);\n  --cico-primary-light: hsl(224 89% 59%);\n  --cico-blue-50: hsl(224 100% 97%);\n  --cico-blue-100: hsl(224 87% 92%);\n  --cico-blue-500: hsl(224 89% 49%);\n  --cico-blue-600: hsl(224 89% 39%);\n  --cico-blue-700: hsl(224 89% 29%);\n  --cico-blue-800: hsl(224 89% 19%);\n  --cico-blue-900: hsl(224 89% 9%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(213 78% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(213 78% 58%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(213 78% 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  html {\n    @apply scroll-smooth;\n  }\n}\n\n@layer components {\n  .cico-gradient {\n    background: linear-gradient(135deg, var(--cico-blue-800) 0%, var(--cico-blue-900) 100%);\n  }\n  \n  .cico-btn-primary {\n    @apply bg-blue-600 hover:bg-blue-700 text-white font-medium px-6 py-3 rounded-xl transition-colors;\n  }\n  \n  .cico-btn-secondary {\n    @apply border-2 border-blue-600 text-blue-600 hover:bg-blue-50 font-medium px-6 py-3 rounded-xl transition-colors;\n  }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { opacity: 0; transform: translateY(30px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes scaleIn {\n  from { opacity: 0; transform: scale(0.95); }\n  to { opacity: 1; transform: scale(1); }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.6s ease-out;\n}\n\n.animate-scale-in {\n  animation: scaleIn 0.3s ease-out;\n}\n","size_bytes":3839},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport bcrypt from 'bcrypt';\nimport { storage } from '../storage';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    employeeId?: string;\n    role?: string;\n  }\n}\n\nexport async function authenticateEmployee(req: Request, res: Response, next: NextFunction) {\n  if (!req.session?.employeeId) {\n    return res.status(401).json({ message: 'Non autenticato' });\n  }\n\n  const employee = await storage.getEmployee(req.session.employeeId);\n  if (!employee) {\n    req.session.destroy(() => {});\n    return res.status(401).json({ message: 'Sessione non valida' });\n  }\n\n  req.user = employee;\n  next();\n}\n\nexport async function requireAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.user || req.user.role !== 'ADMIN') {\n    return res.status(403).json({ message: 'Accesso negato - privilegi amministratore richiesti' });\n  }\n  next();\n}\n\nexport async function loginEmployee(username: string, password: string) {\n  const employee = await storage.getEmployeeByUsername(username);\n  if (!employee) {\n    return null;\n  }\n\n  const isValid = await bcrypt.compare(password, employee.password);\n  if (!isValid) {\n    return null;\n  }\n\n  return employee;\n}\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        username: string;\n        role: string;\n      };\n    }\n  }\n}\n","size_bytes":1402},"server/services/emailService.ts":{"content":"import nodemailer from 'nodemailer';\nimport { Booking, Vehicle } from '@shared/schema';\n\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST || 'smtps.aruba.it',\n  port: Number(process.env.SMTP_PORT) || 465,\n  secure: true,\n  auth: {\n    user: process.env.SMTP_USER || 'info@cicorent.it',\n    pass: process.env.SMTP_PASS || 'pswcicorent',\n  },\n});\n\nconst FROM = `\"CICO Rent\" <${process.env.SMTP_USER || 'info@cicorent.it'}>`;\n\nexport async function sendBookingConfirmationToCustomer(booking: Booking & { vehicle: Vehicle }) {\n  const subject = `CICO Rent - Prenotazione ${booking.bookingCode} ricevuta`;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Conferma Prenotazione</title>\n        <style>\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n            .header { background: #1e40af; color: white; padding: 20px; text-align: center; }\n            .content { padding: 20px; }\n            .booking-details { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; }\n            .footer { background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <h1>CICO Rent</h1>\n            <p>Prenotazione Confermata</p>\n        </div>\n        \n        <div class=\"content\">\n            <h2>Gentile ${booking.customerFirstName} ${booking.customerLastName},</h2>\n            \n            <p>La sua prenotazione è stata ricevuta con successo. Riceverà una chiamata da una nostra operatrice in giornata per la conferma definitiva.</p>\n            \n            <div class=\"booking-details\">\n                <h3>Dettagli Prenotazione</h3>\n                <p><strong>Codice:</strong> ${booking.bookingCode}</p>\n                <p><strong>Veicolo:</strong> ${booking.vehicle.name}</p>\n                <p><strong>Periodo:</strong> dal ${booking.startDate} al ${booking.endDate}</p>\n                <p><strong>Giorni:</strong> ${booking.daysCount}</p>\n                <p><strong>Totale:</strong> €${booking.totalPrice}</p>\n                <p><strong>Ritiro:</strong> Via Cristoforo Colombo 1778, 00127 Roma</p>\n            </div>\n            \n            <p><strong>Assistenza:</strong> ${process.env.CICO_PHONE || '+39 328 715 3527'}</p>\n            \n            <p>Grazie per aver scelto CICO Rent!</p>\n        </div>\n        \n        <div class=\"footer\">\n            <p>CICO Rent - FGS GAS SAS<br>\n            Via Cristoforo Colombo 1778, 00127 Roma<br>\n            P.IVA/CF 05855791009</p>\n        </div>\n    </body>\n    </html>\n  `;\n\n  await transporter.sendMail({\n    from: FROM,\n    to: booking.customerEmail,\n    subject,\n    html,\n  });\n}\n\nexport async function sendBookingNotificationToAdmin(booking: Booking & { vehicle: Vehicle }) {\n  const subject = `Nuova prenotazione ${booking.bookingCode}`;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Nuova Prenotazione</title>\n        <style>\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n            .header { background: #1e40af; color: white; padding: 20px; text-align: center; }\n            .content { padding: 20px; }\n            .booking-details { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <h1>CICO Rent - Admin</h1>\n            <p>Nuova Prenotazione</p>\n        </div>\n        \n        <div class=\"content\">\n            <h2>Nuova prenotazione ricevuta</h2>\n            \n            <div class=\"booking-details\">\n                <h3>Dettagli</h3>\n                <p><strong>Codice:</strong> ${booking.bookingCode}</p>\n                <p><strong>Cliente:</strong> ${booking.customerFirstName} ${booking.customerLastName}</p>\n                <p><strong>Email:</strong> ${booking.customerEmail}</p>\n                <p><strong>Telefono:</strong> ${booking.customerPhone}</p>\n                <p><strong>Veicolo:</strong> ${booking.vehicle.name}</p>\n                <p><strong>Periodo:</strong> dal ${booking.startDate} al ${booking.endDate}</p>\n                <p><strong>Giorni:</strong> ${booking.daysCount}</p>\n                <p><strong>Totale:</strong> €${booking.totalPrice}</p>\n                ${booking.notes ? `<p><strong>Note:</strong> ${booking.notes}</p>` : ''}\n            </div>\n            \n            <p>Accedi all'area admin per gestire la prenotazione.</p>\n        </div>\n    </body>\n    </html>\n  `;\n\n  await transporter.sendMail({\n    from: FROM,\n    to: process.env.ADMIN_EMAIL || 'info@cicorent.it',\n    subject,\n    html,\n  });\n}\n","size_bytes":4746},"server/services/pdfService.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { Booking, Vehicle } from '@shared/schema';\n\nexport async function generateContract(booking: Booking & { vehicle: Vehicle }): Promise<Buffer> {\n  // Read the HTML template\n  const templatePath = path.join(process.cwd(), 'server/contracts/template.html');\n  let template = fs.readFileSync(templatePath, 'utf8');\n\n  // Replace placeholders with actual data\n  const replacements = {\n    '{{bookingCode}}': booking.bookingCode,\n    '{{customerName}}': `${booking.customerFirstName} ${booking.customerLastName}`,\n    '{{customerBirthDate}}': booking.customerBirthDate,\n    '{{customerPhone}}': booking.customerPhone,\n    '{{customerEmail}}': booking.customerEmail,\n    '{{driverLicenseNo}}': booking.driverLicenseNo,\n    '{{vehicleName}}': booking.vehicle.name,\n    '{{startDate}}': booking.startDate,\n    '{{endDate}}': booking.endDate,\n    '{{daysCount}}': booking.daysCount.toString(),\n    '{{totalPrice}}': `€${booking.totalPrice}`,\n    '{{coverage}}': booking.coverage === 'BASE' ? 'Base' : 'Parziale',\n    '{{kmPlan}}': booking.kmPlan === 'KM_100' ? '100 km/giorno' : booking.kmPlan === 'KM_200' ? '200 km/giorno' : 'Illimitati',\n    '{{additionalDriver}}': (booking.addFirstName && booking.addLastName) ? \n      `${booking.addFirstName} ${booking.addLastName} - Patente: ${booking.addDriverLicenseNo}` : 'Nessuno',\n    '{{homeDelivery}}': booking.homeDelivery ? 'Sì' : 'No',\n    '{{homePickup}}': booking.homePickup ? 'Sì' : 'No',\n    '{{notes}}': booking.notes || 'Nessuna',\n    '{{currentDate}}': new Date().toLocaleDateString('it-IT'),\n  };\n\n  for (const [placeholder, value] of Object.entries(replacements)) {\n    template = template.replace(new RegExp(placeholder, 'g'), value);\n  }\n\n  // For now, return the HTML as buffer (in a real implementation, use Puppeteer)\n  // TODO: Implement Puppeteer PDF generation\n  return Buffer.from(template, 'utf8');\n}\n","size_bytes":1918},"server/services/pricingService.ts":{"content":"import { QuoteInput, QuoteResult } from \"@shared/schema\";\n\nfunction round2(n: number): number {\n  return Math.round(n * 100) / 100;\n}\n\nfunction roundTo5(n: number): number {\n  return Math.round(n / 5) * 5;\n}\n\nexport function computeQuote(input: QuoteInput, vehicleBasePrice: number, vehicleType: string): QuoteResult {\n  const startDate = new Date(input.startDate);\n  const endDate = new Date(input.endDate);\n  const days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n\n  const coverageMult = input.coverage === 'PARTIAL' ? 1.25 : 1.0;\n  const kmPerDay = input.kmPlan === 'KM_200' ? 5 : input.kmPlan === 'UNLIMITED' ? 10 : 0;\n  const extraPerDay = input.extraDriverUnder25 ? 10 : (input.extraDriver ? 8 : 0);\n\n  // Handle hourly packages for vans\n  if (input.packageType === 'VAN_4H' || input.packageType === 'VAN_10H') {\n    if (vehicleType !== 'VAN') {\n      throw new Error('Fasce orarie solo furgoni');\n    }\n    const base = input.packageType === 'VAN_4H' ? 50 : 65;\n    const delivery = (input.homeDelivery ? 30 : 0) + (input.homePickup ? 30 : 0);\n    return {\n      total: round2(base + delivery),\n      discountEuroShown: 0,\n      discountPctShown: 0,\n      daysCount: 1,\n      breakdown: { baseWithDiscount: base, km: 0, extra: 0, delivery }\n    };\n  }\n\n  // Calculate actual days for different package types\n  const actualDays = input.packageType === 'WEEKLY' ? 7 : input.packageType === 'MONTHLY' ? 30 : days;\n  \n  // Multi-day discount factors\n  const factor =\n    actualDays >= 30 ? 16 :\n    actualDays >= 7 ? 3.5 :\n    actualDays === 6 ? 3.25 :\n    actualDays === 5 ? 3.0 :\n    actualDays === 4 ? 2.75 :\n    actualDays === 3 ? 2.25 : \n    actualDays;\n\n  const coveredDay = vehicleBasePrice * coverageMult;\n  const theoretical = coveredDay * actualDays;\n  const baseWithDiscount = theoretical * (factor / actualDays);\n\n  const km = kmPerDay * actualDays;\n  const extra = extraPerDay * actualDays;\n  const delivery = (input.homeDelivery ? 30 : 0) + (input.homePickup ? 30 : 0);\n\n  const total = round2(baseWithDiscount + km + extra + delivery);\n\n  const discountEuro = theoretical - baseWithDiscount;\n  const discountEuroShown = roundTo5(discountEuro);\n  const discountPctShown = roundTo5((discountEuro / theoretical) * 100);\n\n  return {\n    total,\n    breakdown: {\n      baseWithDiscount: round2(baseWithDiscount),\n      km,\n      extra,\n      delivery\n    },\n    discountEuroShown,\n    discountPctShown,\n    daysCount: actualDays\n  };\n}\n","size_bytes":2484},"client/src/components/AdminBookingTable.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Booking } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Edit, FileText, Trash2, Download } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface AdminBookingTableProps {\n  bookings: Booking[];\n  onRefresh: () => void;\n}\n\nexport default function AdminBookingTable({ bookings, onRefresh }: AdminBookingTableProps) {\n  const [editingBooking, setEditingBooking] = useState<Booking | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateBookingMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/bookings/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Prenotazione aggiornata\",\n        description: \"La prenotazione è stata aggiornata con successo.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/bookings\"] });\n      setEditingBooking(null);\n      onRefresh();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Errore\",\n        description: error.message || \"Errore nell'aggiornamento della prenotazione.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteBookingMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/bookings/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Prenotazione cancellata\",\n        description: \"La prenotazione è stata cancellata con successo.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/bookings\"] });\n      onRefresh();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Errore\",\n        description: error.message || \"Errore nella cancellazione della prenotazione.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusUpdate = (bookingId: string, newStatus: string) => {\n    updateBookingMutation.mutate({\n      id: bookingId,\n      updates: { status: newStatus },\n    });\n  };\n\n  const handleGenerateContract = async (bookingId: string, bookingCode: string) => {\n    try {\n      const response = await fetch(`/api/admin/bookings/${bookingId}/contract`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Errore nella generazione del contratto');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `Contratto-${bookingCode}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Contratto generato\",\n        description: \"Il contratto PDF è stato scaricato con successo.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Errore nella generazione del contratto PDF.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">In Attesa</Badge>;\n      case 'CONFIRMED':\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Confermata</Badge>;\n      case 'CANCELLED':\n        return <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\">Cancellata</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Codice</TableHead>\n              <TableHead>Cliente</TableHead>\n              <TableHead>Veicolo</TableHead>\n              <TableHead>Periodo</TableHead>\n              <TableHead>Totale</TableHead>\n              <TableHead>Stato</TableHead>\n              <TableHead>Azioni</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {bookings.map((booking) => (\n              <TableRow key={booking.id}>\n                <TableCell className=\"font-mono text-sm\" data-testid={`booking-code-${booking.bookingCode}`}>\n                  {booking.bookingCode}\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div className=\"font-medium text-gray-900\">\n                      {booking.customerFirstName} {booking.customerLastName}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">{booking.customerEmail}</div>\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-sm text-gray-900\">\n                  {booking.vehicle.name}\n                </TableCell>\n                <TableCell className=\"text-sm text-gray-600\">\n                  {new Date(booking.startDate).toLocaleDateString('it-IT')} - {new Date(booking.endDate).toLocaleDateString('it-IT')}\n                </TableCell>\n                <TableCell className=\"font-semibold text-gray-900\">\n                  €{booking.totalPrice}\n                </TableCell>\n                <TableCell>\n                  <Select \n                    value={booking.status} \n                    onValueChange={(value) => handleStatusUpdate(booking.id, value)}\n                  >\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"PENDING\">In Attesa</SelectItem>\n                      <SelectItem value=\"CONFIRMED\">Confermata</SelectItem>\n                      <SelectItem value=\"CANCELLED\">Cancellata</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => setEditingBooking(booking)}\n                          data-testid={`edit-booking-${booking.bookingCode}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle>Modifica Prenotazione {booking.bookingCode}</DialogTitle>\n                        </DialogHeader>\n                        {editingBooking && (\n                          <EditBookingForm \n                            booking={editingBooking}\n                            onSave={(updates) => updateBookingMutation.mutate({ id: editingBooking.id, updates })}\n                            onCancel={() => setEditingBooking(null)}\n                            isLoading={updateBookingMutation.isPending}\n                          />\n                        )}\n                      </DialogContent>\n                    </Dialog>\n\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => handleGenerateContract(booking.id, booking.bookingCode)}\n                      data-testid={`generate-contract-${booking.bookingCode}`}\n                    >\n                      <FileText className=\"h-4 w-4\" />\n                    </Button>\n\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => {\n                        if (confirm('Sei sicuro di voler cancellare questa prenotazione?')) {\n                          deleteBookingMutation.mutate(booking.id);\n                        }\n                      }}\n                      data-testid={`delete-booking-${booking.bookingCode}`}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {bookings.length === 0 && (\n        <div className=\"text-center py-12\">\n          <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Nessuna prenotazione</h3>\n          <p className=\"text-gray-600\">Non ci sono prenotazioni al momento.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface EditBookingFormProps {\n  booking: Booking;\n  onSave: (updates: any) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}\n\nfunction EditBookingForm({ booking, onSave, onCancel, isLoading }: EditBookingFormProps) {\n  const [formData, setFormData] = useState({\n    customerFirstName: booking.customerFirstName,\n    customerLastName: booking.customerLastName,\n    customerPhone: booking.customerPhone,\n    customerEmail: booking.customerEmail,\n    notes: booking.notes || '',\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSave(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label>Nome</Label>\n          <Input \n            value={formData.customerFirstName}\n            onChange={(e) => setFormData(prev => ({ ...prev, customerFirstName: e.target.value }))}\n          />\n        </div>\n        <div>\n          <Label>Cognome</Label>\n          <Input \n            value={formData.customerLastName}\n            onChange={(e) => setFormData(prev => ({ ...prev, customerLastName: e.target.value }))}\n          />\n        </div>\n        <div>\n          <Label>Telefono</Label>\n          <Input \n            value={formData.customerPhone}\n            onChange={(e) => setFormData(prev => ({ ...prev, customerPhone: e.target.value }))}\n          />\n        </div>\n        <div>\n          <Label>Email</Label>\n          <Input \n            value={formData.customerEmail}\n            onChange={(e) => setFormData(prev => ({ ...prev, customerEmail: e.target.value }))}\n          />\n        </div>\n      </div>\n      \n      <div>\n        <Label>Note</Label>\n        <Input \n          value={formData.notes}\n          onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n        />\n      </div>\n\n      <div className=\"flex justify-end space-x-2\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n          Annulla\n        </Button>\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? \"Salvando...\" : \"Salva\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":11601},"client/src/components/BookingModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Vehicle, QuoteResult, QuoteInput, BookingData } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { X, Check, Phone } from \"lucide-react\";\n\nconst bookingSchema = z.object({\n  customerFirstName: z.string().min(1, \"Nome richiesto\"),\n  customerLastName: z.string().min(1, \"Cognome richiesto\"),\n  customerBirthDate: z.string().min(1, \"Data di nascita richiesta\"),\n  customerPhone: z.string().min(1, \"Telefono richiesto\"),\n  customerEmail: z.string().email(\"Email non valida\"),\n  driverLicenseNo: z.string().min(1, \"Numero patente richiesto\"),\n  addFirstName: z.string().optional(),\n  addLastName: z.string().optional(),\n  addBirthDate: z.string().optional(),\n  addDriverLicenseNo: z.string().optional(),\n  notes: z.string().optional(),\n  terms: z.boolean().refine(val => val === true, \"Devi accettare i termini e condizioni\"),\n});\n\ntype BookingFormData = z.infer<typeof bookingSchema>;\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  vehicle: Vehicle;\n  quote: QuoteResult | null;\n  bookingData: Partial<QuoteInput>;\n}\n\nexport default function BookingModal({ isOpen, onClose, vehicle, quote, bookingData }: BookingModalProps) {\n  const [showAdditionalDriver, setShowAdditionalDriver] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      customerFirstName: \"\",\n      customerLastName: \"\",\n      customerBirthDate: \"\",\n      customerPhone: \"\",\n      customerEmail: \"\",\n      driverLicenseNo: \"\",\n      addFirstName: \"\",\n      addLastName: \"\",\n      addBirthDate: \"\",\n      addDriverLicenseNo: \"\",\n      notes: \"\",\n      terms: false,\n    },\n  });\n\n  // Check if additional driver fields should be shown\n  useState(() => {\n    if (bookingData.extraDriver || bookingData.extraDriverUnder25) {\n      setShowAdditionalDriver(true);\n    }\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: BookingFormData) => {\n      const bookingPayload: BookingData = {\n        vehicleId: vehicle.id,\n        startDate: bookingData.startDate!,\n        endDate: bookingData.endDate!,\n        daysCount: quote?.daysCount || 1,\n        packageType: bookingData.packageType!,\n        kmPlan: bookingData.kmPlan!,\n        coverage: bookingData.coverage!,\n        extraDriver: bookingData.extraDriver || false,\n        extraDriverUnder25: bookingData.extraDriverUnder25 || false,\n        homeDelivery: bookingData.homeDelivery || false,\n        homePickup: bookingData.homePickup || false,\n        customerFirstName: data.customerFirstName,\n        customerLastName: data.customerLastName,\n        customerBirthDate: data.customerBirthDate,\n        customerPhone: data.customerPhone,\n        customerEmail: data.customerEmail,\n        driverLicenseNo: data.driverLicenseNo,\n        addFirstName: data.addFirstName,\n        addLastName: data.addLastName,\n        addBirthDate: data.addBirthDate,\n        addDriverLicenseNo: data.addDriverLicenseNo,\n        notes: data.notes,\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/book\", bookingPayload);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Prenotazione confermata!\",\n        description: `Codice prenotazione: ${data.booking.bookingCode}. Riceverai una chiamata da una nostra operatrice in giornata.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/bookings\"] });\n      onClose();\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Errore nella prenotazione\",\n        description: error.message || \"Si è verificato un errore durante la prenotazione.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: BookingFormData) => {\n    if (!quote || !bookingData.startDate || !bookingData.endDate) {\n      toast({\n        title: \"Dati mancanti\",\n        description: \"Assicurati di aver configurato correttamente il noleggio.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bookingMutation.mutate(data);\n  };\n\n  if (!quote) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-screen overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n            Prenotazione Online\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Customer Information */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Dati del cliente</h3>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"customerFirstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome *</FormLabel>\n                      <FormControl>\n                        <Input data-testid=\"customer-first-name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customerLastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cognome *</FormLabel>\n                      <FormControl>\n                        <Input data-testid=\"customer-last-name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customerBirthDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Data di nascita *</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" data-testid=\"customer-birth-date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customerPhone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Telefono *</FormLabel>\n                      <FormControl>\n                        <Input type=\"tel\" data-testid=\"customer-phone\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customerEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email *</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" data-testid=\"customer-email\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"driverLicenseNo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Numero patente *</FormLabel>\n                      <FormControl>\n                        <Input data-testid=\"driver-license-no\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Additional Driver Section */}\n            {showAdditionalDriver && (\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Conducente aggiuntivo</h3>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"addFirstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nome</FormLabel>\n                        <FormControl>\n                          <Input data-testid=\"additional-first-name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"addLastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Cognome</FormLabel>\n                        <FormControl>\n                          <Input data-testid=\"additional-last-name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"addBirthDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data di nascita</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" data-testid=\"additional-birth-date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"addDriverLicenseNo\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Numero patente</FormLabel>\n                        <FormControl>\n                          <Input data-testid=\"additional-license-no\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Notes */}\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Note aggiuntive</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Inserisci eventuali richieste particolari...\"\n                      data-testid=\"booking-notes\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Terms and Conditions */}\n            <FormField\n              control={form.control}\n              name=\"terms\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                  <FormControl>\n                    <Checkbox \n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"terms-checkbox\"\n                    />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <FormLabel className=\"text-sm cursor-pointer\">\n                      Accetto i <span className=\"text-blue-600 hover:text-blue-700\">Termini e Condizioni</span> \n                      {\" \"}e l'<span className=\"text-blue-600 hover:text-blue-700\">Informativa sulla Privacy</span> *\n                    </FormLabel>\n                    <FormMessage />\n                  </div>\n                </FormItem>\n              )}\n            />\n\n            {/* Price Summary and Submit */}\n            <div className=\"bg-gray-50 rounded-xl p-6\">\n              <div className=\"text-center mb-4\">\n                <div className=\"text-2xl font-bold text-blue-800 mb-1\">\n                  {quote.total.toFixed(2)}€\n                </div>\n                <div className=\"text-sm text-gray-600\">Totale del noleggio (IVA inclusa)</div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-blue-600 hover:bg-blue-700 h-12\"\n                disabled={bookingMutation.isPending}\n                data-testid=\"submit-booking-btn\"\n              >\n                {bookingMutation.isPending ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Prenotazione in corso...\n                  </div>\n                ) : (\n                  <>\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    Conferma Prenotazione\n                  </>\n                )}\n              </Button>\n              \n              <p className=\"text-sm text-gray-600 text-center mt-4\">\n                <Phone className=\"w-4 h-4 inline mr-1\" />\n                Riceverai una chiamata da una nostra operatrice in giornata per confermare la prenotazione\n              </p>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14188},"client/src/components/PhoneModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\ninterface PhoneModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function PhoneModal({ isOpen, onClose }: PhoneModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"bg-blue-100 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <i className=\"fas fa-phone text-blue-600 text-2xl\"></i>\n          </div>\n          <DialogTitle className=\"text-2xl font-bold text-gray-900 mb-4\">\n            Chiamaci Ora\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"text-center\">\n          <p className=\"text-gray-600 mb-6\">\n            Parla direttamente con un nostro operatore per prenotare il tuo veicolo\n          </p>\n          \n          <div className=\"bg-gray-50 rounded-xl p-4 mb-6\">\n            <div className=\"text-3xl font-bold text-blue-800 mb-2\">+39 328 715 3527</div>\n            <div className=\"text-sm text-gray-600\">Lun-Ven 9:00-18:00 • Sab 9:00-13:00</div>\n          </div>\n          \n          <div className=\"flex gap-4\">\n            <button \n              onClick={onClose}\n              className=\"flex-1 border border-gray-300 text-gray-700 px-6 py-3 rounded-xl hover:bg-gray-50 transition-colors\"\n              data-testid=\"phone-modal-close\"\n            >\n              Chiudi\n            </button>\n            <a \n              href=\"tel:+393287153527\" \n              className=\"flex-1 bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition-colors font-medium\"\n              data-testid=\"phone-modal-call\"\n            >\n              <i className=\"fas fa-phone mr-2\"></i>Chiama\n            </a>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1922},"client/src/components/PricingCalculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Vehicle, QuoteInput, QuoteResult } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n\ninterface PricingCalculatorProps {\n  vehicle: Vehicle;\n  onQuoteUpdate: (quote: QuoteResult | null) => void;\n  onBookingDataUpdate: (data: Partial<QuoteInput>) => void;\n}\n\nexport default function PricingCalculator({ vehicle, onQuoteUpdate, onBookingDataUpdate }: PricingCalculatorProps) {\n  const [formData, setFormData] = useState<QuoteInput>({\n    vehicleId: vehicle.id,\n    startDate: '',\n    endDate: '',\n    packageType: 'STANDARD_24H',\n    kmPlan: 'KM_100',\n    coverage: 'BASE',\n    extraDriver: false,\n    extraDriverUnder25: false,\n    homeDelivery: false,\n    homePickup: false,\n  });\n\n  const { data: quote, refetch: fetchQuote } = useQuery<QuoteResult>({\n    queryKey: [\"/api/quote\", formData],\n    enabled: false,\n  });\n\n  useEffect(() => {\n    if (formData.startDate && formData.endDate && formData.startDate <= formData.endDate) {\n      fetchQuote();\n      onBookingDataUpdate(formData);\n    } else {\n      onQuoteUpdate(null);\n    }\n  }, [formData, fetchQuote, onQuoteUpdate, onBookingDataUpdate]);\n\n  useEffect(() => {\n    if (quote) {\n      onQuoteUpdate(quote);\n    }\n  }, [quote, onQuoteUpdate]);\n\n  const handleFormChange = (field: keyof QuoteInput, value: any) => {\n    setFormData(prev => {\n      const newData = { ...prev, [field]: value };\n      \n      // Handle mutual exclusivity for extra drivers\n      if (field === 'extraDriver' && value && prev.extraDriverUnder25) {\n        newData.extraDriverUnder25 = false;\n      } else if (field === 'extraDriverUnder25' && value && prev.extraDriver) {\n        newData.extraDriver = false;\n      }\n      \n      return newData;\n    });\n  };\n\n  // Set minimum date to today\n  const today = new Date().toISOString().split('T')[0];\n\n  return (\n    <div className=\"bg-gray-50 rounded-xl p-6\">\n      <h3 className=\"text-xl font-bold text-gray-900 mb-6\">Configura il tuo noleggio</h3>\n      \n      <div className=\"space-y-6\">\n        {/* Date Range Picker */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2\">Periodo di noleggio</Label>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Input\n                type=\"date\"\n                min={today}\n                value={formData.startDate}\n                onChange={(e) => handleFormChange('startDate', e.target.value)}\n                data-testid=\"start-date-input\"\n              />\n              <Label className=\"text-xs text-gray-500 mt-1\">Data inizio</Label>\n            </div>\n            <div>\n              <Input\n                type=\"date\"\n                min={formData.startDate || today}\n                value={formData.endDate}\n                onChange={(e) => handleFormChange('endDate', e.target.value)}\n                data-testid=\"end-date-input\"\n              />\n              <Label className=\"text-xs text-gray-500 mt-1\">Data fine</Label>\n            </div>\n          </div>\n        </div>\n        \n        {/* Package Type */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2\">Tipo di noleggio</Label>\n          <Select value={formData.packageType} onValueChange={(value: any) => handleFormChange('packageType', value)}>\n            <SelectTrigger data-testid=\"package-type-select\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"STANDARD_24H\">Standard 24h</SelectItem>\n              {vehicle.type === 'VAN' && (\n                <>\n                  <SelectItem value=\"VAN_4H\">Furgone 4h</SelectItem>\n                  <SelectItem value=\"VAN_10H\">Furgone 10h</SelectItem>\n                </>\n              )}\n              <SelectItem value=\"WEEKLY\">Settimanale</SelectItem>\n              <SelectItem value=\"MONTHLY\">Mensile</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        {/* Coverage */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2\">Copertura assicurativa</Label>\n          <RadioGroup value={formData.coverage} onValueChange={(value) => handleFormChange('coverage', value)}>\n            <div className=\"flex items-start space-x-3\">\n              <RadioGroupItem value=\"BASE\" id=\"coverage-base\" />\n              <div className=\"flex-1\">\n                <Label htmlFor=\"coverage-base\" className=\"font-medium text-gray-900 cursor-pointer\">Base</Label>\n                <p className=\"text-sm text-gray-600\">RCA 500€ • Kasko 1000€ • Furto/Incendio 15%</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <RadioGroupItem value=\"PARTIAL\" id=\"coverage-partial\" />\n              <div className=\"flex-1\">\n                <Label htmlFor=\"coverage-partial\" className=\"font-medium text-gray-900 cursor-pointer\">Parziale (+25%)</Label>\n                <p className=\"text-sm text-gray-600\">RCA 250€ • Kasko 750€ • Furto/Incendio 15%</p>\n              </div>\n            </div>\n          </RadioGroup>\n        </div>\n        \n        {/* KM Plan */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2\">Piano chilometri</Label>\n          <RadioGroup value={formData.kmPlan} onValueChange={(value) => handleFormChange('kmPlan', value)}>\n            <div className=\"flex items-start space-x-3\">\n              <RadioGroupItem value=\"KM_100\" id=\"km-100\" />\n              <div className=\"flex-1\">\n                <Label htmlFor=\"km-100\" className=\"font-medium text-gray-900 cursor-pointer\">100 km/giorno</Label>\n                <p className=\"text-sm text-gray-600\">Incluso nel prezzo base</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <RadioGroupItem value=\"KM_200\" id=\"km-200\" />\n              <div className=\"flex-1\">\n                <Label htmlFor=\"km-200\" className=\"font-medium text-gray-900 cursor-pointer\">200 km/giorno (+5€/giorno)</Label>\n                <p className=\"text-sm text-gray-600\">Ideale per viaggi lunghi</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <RadioGroupItem value=\"UNLIMITED\" id=\"km-unlimited\" />\n              <div className=\"flex-1\">\n                <Label htmlFor=\"km-unlimited\" className=\"font-medium text-gray-900 cursor-pointer\">Km illimitati (+10€/giorno)</Label>\n                <p className=\"text-sm text-gray-600\">Massima libertà di movimento</p>\n              </div>\n            </div>\n          </RadioGroup>\n        </div>\n        \n        {/* Extra Options */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-3\">Opzioni extra</Label>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox \n                  id=\"extra-driver\"\n                  checked={formData.extraDriver}\n                  onCheckedChange={(checked) => handleFormChange('extraDriver', checked)}\n                  data-testid=\"extra-driver-checkbox\"\n                />\n                <Label htmlFor=\"extra-driver\" className=\"font-medium text-gray-900\">Conducente aggiuntivo</Label>\n              </div>\n              <span className=\"text-sm text-gray-600\">+8€/giorno</span>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox \n                  id=\"extra-driver-under25\"\n                  checked={formData.extraDriverUnder25}\n                  onCheckedChange={(checked) => handleFormChange('extraDriverUnder25', checked)}\n                  data-testid=\"extra-driver-under25-checkbox\"\n                />\n                <Label htmlFor=\"extra-driver-under25\" className=\"font-medium text-gray-900\">Conducente aggiuntivo under 25</Label>\n              </div>\n              <span className=\"text-sm text-gray-600\">+10€/giorno</span>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox \n                  id=\"home-delivery\"\n                  checked={formData.homeDelivery}\n                  onCheckedChange={(checked) => handleFormChange('homeDelivery', checked)}\n                  data-testid=\"home-delivery-checkbox\"\n                />\n                <Label htmlFor=\"home-delivery\" className=\"font-medium text-gray-900\">Consegna a domicilio</Label>\n              </div>\n              <span className=\"text-sm text-gray-600\">30€ (entro 10 km)</span>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox \n                  id=\"home-pickup\"\n                  checked={formData.homePickup}\n                  onCheckedChange={(checked) => handleFormChange('homePickup', checked)}\n                  data-testid=\"home-pickup-checkbox\"\n                />\n                <Label htmlFor=\"home-pickup\" className=\"font-medium text-gray-900\">Ritiro a domicilio</Label>\n              </div>\n              <span className=\"text-sm text-gray-600\">30€ (entro 10 km)</span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Price Breakdown */}\n        {quote && (\n          <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n            <h4 className=\"font-semibold text-gray-900 mb-3\">Riepilogo prezzi</h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span>Base ({quote.daysCount} giorni):</span>\n                <span>{quote.breakdown.baseWithDiscount.toFixed(2)}€</span>\n              </div>\n              {quote.discountEuroShown > 0 && (\n                <div className=\"flex justify-between text-green-600\">\n                  <span>Sconto multi-giorno:</span>\n                  <span>-{quote.discountEuroShown}€ (-{quote.discountPctShown}%)</span>\n                </div>\n              )}\n              {quote.breakdown.km > 0 && (\n                <div className=\"flex justify-between\">\n                  <span>Chilometri extra:</span>\n                  <span>{quote.breakdown.km}€</span>\n                </div>\n              )}\n              {quote.breakdown.extra > 0 && (\n                <div className=\"flex justify-between\">\n                  <span>Conducente extra:</span>\n                  <span>{quote.breakdown.extra}€</span>\n                </div>\n              )}\n              {quote.breakdown.delivery > 0 && (\n                <div className=\"flex justify-between\">\n                  <span>Consegna/Ritiro:</span>\n                  <span>{quote.breakdown.delivery}€</span>\n                </div>\n              )}\n              <hr className=\"my-2\" />\n              <div className=\"flex justify-between font-bold text-lg\">\n                <span>Totale:</span>\n                <span data-testid=\"total-price\">{quote.total.toFixed(2)}€</span>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-2\">\n                IVA inclusa • Cauzione: 1.000€ • Km eccedenti: 1€/km\n              </p>\n            </div>\n            \n            {quote.discountEuroShown > 0 && (\n              <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-tag text-green-600\"></i>\n                  <span className=\"text-sm font-medium text-green-800\">Risparmia con il noleggio multi-giorno!</span>\n                </div>\n                <p className=\"text-sm text-green-600 mt-1\">\n                  Stai risparmiando {quote.discountEuroShown}€ prenotando per più giorni.\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12513},"client/src/components/VehicleCard.tsx":{"content":"import { Vehicle } from \"@/types\";\nimport { useLocation } from \"wouter\";\n\ninterface VehicleCardProps {\n  vehicle: Vehicle;\n}\n\nexport default function VehicleCard({ vehicle }: VehicleCardProps) {\n  const [, setLocation] = useLocation();\n\n  const getVehicleImage = (type: string, slug: string) => {\n    if (slug === 'crafter') {\n      return \"https://pixabay.com/get/g23de386d57c87d30d50ee2d61b4d743df5027a7f761dc46846f7abc34a428cf5cba1446c416f309fe02aa23a3323b64a43c2d438b8bf1ee5bf5098ff3ffd50d4_1280.jpg\";\n    } else if (slug === 'boxer') {\n      return \"https://images.unsplash.com/photo-1601362840469-51e4d8d58785?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&h=600\";\n    } else {\n      return \"https://images.unsplash.com/photo-1583121274602-3e2820c69888?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&h=600\";\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-100\">\n      <img \n        src={getVehicleImage(vehicle.type, vehicle.slug)} \n        alt={vehicle.name} \n        className=\"w-full h-56 object-cover rounded-t-2xl\"\n      />\n      \n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-xl font-bold text-gray-900\">{vehicle.name}</h3>\n          <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n            vehicle.type === 'VAN' \n              ? 'bg-blue-100 text-blue-800' \n              : 'bg-green-100 text-green-800'\n          }`}>\n            {vehicle.type === 'VAN' ? 'Furgone' : 'Auto'}\n          </span>\n        </div>\n        \n        <p className=\"text-gray-600 mb-4\">\n          {vehicle.type === 'VAN' ? 'Ideale per traslochi e trasporti' : 'Perfetto per spostamenti urbani'}\n        </p>\n        \n        <div className=\"grid grid-cols-2 gap-4 mb-6 text-sm\">\n          <div className=\"flex items-center text-gray-600\">\n            <i className=\"fas fa-users mr-2 text-gray-400\"></i>\n            <span>{vehicle.quantity} unità</span>\n          </div>\n          <div className=\"flex items-center text-gray-600\">\n            <i className=\"fas fa-palette mr-2 text-gray-400\"></i>\n            <span>{vehicle.colorOptions.join(', ')}</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"text-sm text-gray-500\">da</span>\n            <div className=\"text-2xl font-bold text-blue-800\">\n              {vehicle.basePriceDay}€\n              <span className=\"text-sm font-normal text-gray-600\">/24h</span>\n            </div>\n            <span className=\"text-xs text-gray-500\">IVA inclusa</span>\n          </div>\n          <button \n            onClick={() => setLocation(`/veicoli/${vehicle.slug}`)}\n            className=\"bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition-colors font-medium\"\n            data-testid={`vehicle-card-book-${vehicle.slug}`}\n          >\n            Prenota\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3197},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Employee } from \"@/types\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<Employee>({\n    queryKey: [\"/api/admin/me\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n    error,\n  };\n}\n","size_bytes":363},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminLoginPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ArrowLeft, Lock, User } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username richiesto\"),\n  password: z.string().min(1, \"Password richiesta\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function AdminLoginPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login effettuato\",\n        description: `Benvenuto, ${data.username}!`,\n      });\n      setLocation(\"/admin\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Errore di login\",\n        description: error.message || \"Credenziali non valide\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/\")}\n            className=\"mb-6\"\n            data-testid=\"back-to-home\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Torna alla homepage\n          </Button>\n          \n          <div className=\"flex items-center justify-center space-x-3 mb-6\">\n            <div className=\"bg-blue-800 text-white px-4 py-2 rounded-lg font-bold text-xl\">\n              CICO\n            </div>\n            <span className=\"text-gray-600 font-medium text-xl\">Rent</span>\n          </div>\n        </div>\n\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <div className=\"bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Lock className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">\n              Area Amministrativa\n            </CardTitle>\n            <CardDescription>\n              Accedi con le tue credenziali per gestire il sistema\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                          <Input \n                            placeholder=\"Inserisci il tuo username\"\n                            className=\"pl-10\"\n                            data-testid=\"username-input\"\n                            {...field}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                          <Input \n                            type=\"password\"\n                            placeholder=\"Inserisci la tua password\"\n                            className=\"pl-10\"\n                            data-testid=\"password-input\"\n                            {...field}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-blue-600 hover:bg-blue-700 h-12\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"login-submit-btn\"\n                >\n                  {loginMutation.isPending ? (\n                    <div className=\"flex items-center\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Accesso in corso...\n                    </div>\n                  ) : (\n                    \"Accedi\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Solo per personale autorizzato CICO Rent\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer Info */}\n        <div className=\"text-center text-sm text-gray-500\">\n          <p>CICO Rent - FGS GAS SAS</p>\n          <p>Via Cristoforo Colombo 1778, 00127 Roma</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6293},"client/src/pages/AdminPage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Booking, Vehicle, BlackoutDate } from '@shared/schema';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\n// Admin Login Component\ninterface AdminLoginProps {\n  onLogin: (credentials: { username: string; password: string }) => void;\n  isLoading: boolean;\n}\n\nfunction AdminLogin({ onLogin, isLoading }: AdminLoginProps) {\n  const [credentials, setCredentials] = useState({ username: '', password: '' });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onLogin(credentials);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"bg-white rounded-2xl shadow-lg p-8 w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"bg-blue-600 text-white px-3 py-2 rounded-lg font-bold text-lg\">CICO</div>\n            <span className=\"font-medium text-gray-900\">Rent Admin</span>\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Accesso Amministratore</h2>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Username</label>\n            <input\n              type=\"text\"\n              value={credentials.username}\n              onChange={(e) => setCredentials(prev => ({ ...prev, username: e.target.value }))}\n              required\n              className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              data-testid=\"admin-username\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Password</label>\n            <input\n              type=\"password\"\n              value={credentials.password}\n              onChange={(e) => setCredentials(prev => ({ ...prev, password: e.target.value }))}\n              required\n              className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              data-testid=\"admin-password\"\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50\"\n            data-testid=\"admin-login-btn\"\n          >\n            {isLoading ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Accesso...\n              </>\n            ) : (\n              'Accedi'\n            )}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// Bookings List Component\ninterface BookingsListProps {\n  bookings: (Booking & { vehicle: Vehicle })[];\n  onStatusChange: (bookingId: string, status: 'PENDING' | 'CONFIRMED' | 'CANCELLED') => void;\n}\n\nfunction BookingsList({ bookings, onStatusChange }: BookingsListProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'CONFIRMED':\n        return 'bg-green-100 text-green-800';\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return 'In Attesa';\n      case 'CONFIRMED':\n        return 'Confermata';\n      case 'CANCELLED':\n        return 'Annullata';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg overflow-hidden\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">Prenotazioni</h2>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Codice</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Cliente</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Veicolo</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Totale</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Stato</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Azioni</th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {bookings.map((booking) => (\n              <tr key={booking.id} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono font-medium text-gray-900\">\n                  {booking.bookingCode}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm font-medium text-gray-900\">\n                    {booking.customerFirstName} {booking.customerLastName}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">{booking.customerPhone}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {booking.vehicle.name}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {booking.startDate} - {booking.endDate}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                  €{booking.totalPrice}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(booking.status)}`}>\n                    {getStatusText(booking.status)}\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                  <div className=\"flex space-x-2\">\n                    {booking.status === 'PENDING' && (\n                      <>\n                        <button\n                          onClick={() => onStatusChange(booking.id, 'CONFIRMED')}\n                          className=\"text-green-600 hover:text-green-900\"\n                          data-testid={`confirm-${booking.id}`}\n                        >\n                          Conferma\n                        </button>\n                        <button\n                          onClick={() => onStatusChange(booking.id, 'CANCELLED')}\n                          className=\"text-red-600 hover:text-red-900\"\n                          data-testid={`cancel-${booking.id}`}\n                        >\n                          Annulla\n                        </button>\n                      </>\n                    )}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\n// Blackout Dates Manager Component\ninterface BlackoutManagerProps {\n  vehicles: Vehicle[];\n}\n\nfunction BlackoutManager({ vehicles }: BlackoutManagerProps) {\n  const [selectedVehicle, setSelectedVehicle] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: blackoutDates = [] } = useQuery<BlackoutDate[]>({\n    queryKey: ['/api/blackout-dates', selectedVehicle],\n    enabled: !!selectedVehicle,\n  });\n\n  const addBlackoutMutation = useMutation({\n    mutationFn: (data: { vehicleId: string; date: string }) => \n      apiRequest('/api/blackout-dates', 'POST', data),\n    onSuccess: () => {\n      toast({\n        title: \"Data Bloccata\",\n        description: \"La data è stata aggiunta alle date non disponibili\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/blackout-dates'] });\n      setSelectedDate('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Errore\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeBlackoutMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/blackout-dates/${id}`, 'DELETE'),\n    onSuccess: () => {\n      toast({\n        title: \"Data Sbloccata\",\n        description: \"La data è stata rimossa dalle date non disponibili\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/blackout-dates'] });\n    },\n  });\n\n  const handleAddBlackout = () => {\n    if (!selectedVehicle || !selectedDate) return;\n    addBlackoutMutation.mutate({ vehicleId: selectedVehicle, date: selectedDate });\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Gestione Date Non Disponibili</h2>\n\n      <div className=\"grid md:grid-cols-3 gap-4 mb-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Veicolo</label>\n          <select\n            value={selectedVehicle}\n            onChange={(e) => setSelectedVehicle(e.target.value)}\n            className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            data-testid=\"vehicle-select\"\n          >\n            <option value=\"\">Seleziona veicolo</option>\n            {vehicles.map((vehicle) => (\n              <option key={vehicle.id} value={vehicle.id}>\n                {vehicle.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Data</label>\n          <input\n            type=\"date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e.target.value)}\n            min={new Date().toISOString().split('T')[0]}\n            className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            data-testid=\"blackout-date-input\"\n          />\n        </div>\n\n        <div className=\"flex items-end\">\n          <button\n            onClick={handleAddBlackout}\n            disabled={!selectedVehicle || !selectedDate || addBlackoutMutation.isPending}\n            className=\"w-full bg-red-600 text-white py-2 rounded-lg font-medium hover:bg-red-700 transition-colors disabled:opacity-50\"\n            data-testid=\"add-blackout-btn\"\n          >\n            {addBlackoutMutation.isPending ? (\n              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n            ) : (\n              <i className=\"fas fa-ban mr-2\"></i>\n            )}\n            Blocca Data\n          </button>\n        </div>\n      </div>\n\n      {selectedVehicle && blackoutDates.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Date Bloccate</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {blackoutDates.map((blackout) => (\n              <div key={blackout.id} className=\"bg-red-50 border border-red-200 rounded-lg p-3 flex items-center justify-between\">\n                <span className=\"text-sm text-red-800\">{blackout.date}</span>\n                <button\n                  onClick={() => removeBlackoutMutation.mutate(blackout.id)}\n                  className=\"text-red-600 hover:text-red-800\"\n                  data-testid={`remove-blackout-${blackout.id}`}\n                >\n                  <i className=\"fas fa-times\"></i>\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function AdminPage() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [activeTab, setActiveTab] = useState<'bookings' | 'blackouts'>('bookings');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const loginMutation = useMutation({\n    mutationFn: (credentials: { username: string; password: string }) =>\n      apiRequest('POST', '/api/admin/login', credentials),\n    onSuccess: () => {\n      setIsLoggedIn(true);\n      toast({\n        title: \"Accesso Effettuato\",\n        description: \"Benvenuto nell'area amministratore\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Errore di Accesso\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: bookings = [] } = useQuery<(Booking & { vehicle: Vehicle })[]>({\n    queryKey: ['/api/admin/bookings'],\n    enabled: isLoggedIn,\n  });\n\n  const { data: vehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: ['/api/vehicles'],\n    enabled: isLoggedIn,\n  });\n\n  const updateBookingMutation = useMutation({\n    mutationFn: ({ id, status }: { id: string; status: string }) =>\n      apiRequest('PATCH', `/api/admin/bookings/${id}`, { status }),\n    onSuccess: () => {\n      toast({\n        title: \"Prenotazione Aggiornata\",\n        description: \"Lo stato della prenotazione è stato modificato\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/bookings'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Errore\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = (credentials: { username: string; password: string }) => {\n    loginMutation.mutate(credentials);\n  };\n\n  const handleStatusChange = (bookingId: string, status: 'PENDING' | 'CONFIRMED' | 'CANCELLED') => {\n    updateBookingMutation.mutate({ id: bookingId, status });\n  };\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest('/api/admin/logout', 'POST');\n      setIsLoggedIn(false);\n      toast({\n        title: \"Logout Effettuato\",\n        description: \"Arrivederci!\",\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  if (!isLoggedIn) {\n    return <AdminLogin onLogin={handleLogin} isLoading={loginMutation.isPending} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-blue-600 text-white px-3 py-2 rounded-lg font-bold text-lg\">CICO</div>\n              <span className=\"font-medium text-gray-900\">Rent Admin</span>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => window.location.href = '/'}\n                className=\"text-gray-600 hover:text-blue-600 transition-colors\"\n              >\n                <i className=\"fas fa-home mr-2\"></i>\n                Homepage\n              </button>\n              \n              <button\n                onClick={handleLogout}\n                className=\"text-red-600 hover:text-red-700 transition-colors\"\n                data-testid=\"logout-btn\"\n              >\n                <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                Logout\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Tabs */}\n        <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-xl mb-8\">\n          <button\n            onClick={() => setActiveTab('bookings')}\n            className={`flex-1 py-2 px-4 rounded-lg font-medium transition-colors ${\n              activeTab === 'bookings'\n                ? 'bg-white text-blue-600 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900'\n            }`}\n            data-testid=\"bookings-tab\"\n          >\n            <i className=\"fas fa-calendar-check mr-2\"></i>\n            Prenotazioni\n          </button>\n          \n          <button\n            onClick={() => setActiveTab('blackouts')}\n            className={`flex-1 py-2 px-4 rounded-lg font-medium transition-colors ${\n              activeTab === 'blackouts'\n                ? 'bg-white text-blue-600 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900'\n            }`}\n            data-testid=\"blackouts-tab\"\n          >\n            <i className=\"fas fa-ban mr-2\"></i>\n            Date Non Disponibili\n          </button>\n        </div>\n\n        {/* Content */}\n        {activeTab === 'bookings' && (\n          <BookingsList bookings={bookings} onStatusChange={handleStatusChange} />\n        )}\n\n        {activeTab === 'blackouts' && (\n          <BlackoutManager vehicles={vehicles} />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":17186},"client/src/pages/HomePage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Vehicle } from '@shared/schema';\nimport { useIsMobile } from '@/hooks/use-mobile';\n\n// Phone Modal Component\ninterface PhoneModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nfunction PhoneModal({ isOpen, onClose }: PhoneModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-2xl p-8 max-w-md w-full mx-4\">\n        <div className=\"text-center\">\n          <div className=\"bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-phone text-2xl text-blue-600\"></i>\n          </div>\n          <h3 className=\"text-xl font-semibold mb-2\">Chiamaci Ora</h3>\n          <p className=\"text-gray-600 mb-6\">Un nostro operatore ti assisterà per la prenotazione</p>\n          <a \n            href=\"tel:+393287153527\"\n            className=\"bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors inline-block mb-4\"\n            data-testid=\"phone-modal-call\"\n          >\n            <i className=\"fas fa-phone mr-2\"></i>+39 328 715 3527\n          </a>\n          <button \n            onClick={onClose}\n            className=\"block w-full text-gray-500 hover:text-gray-700 transition-colors\"\n            data-testid=\"phone-modal-close\"\n          >\n            Chiudi\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Vehicle Card Component\ninterface VehicleCardProps {\n  vehicle: Vehicle;\n}\n\nfunction VehicleCard({ vehicle }: VehicleCardProps) {\n  const isMobile = useIsMobile();\n  const [showPhoneModal, setShowPhoneModal] = useState(false);\n\n  const handleBookClick = () => {\n    if (isMobile) {\n      setShowPhoneModal(true);\n    } else {\n      // Navigate to vehicle detail page\n      window.location.href = `/veicoli/${vehicle.id}`;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n        <div className=\"aspect-video bg-gradient-to-br from-blue-50 to-white relative overflow-hidden\">\n          {vehicle.imageUrl ? (\n            <img \n              src={vehicle.imageUrl} \n              alt={vehicle.name}\n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-100 to-blue-50\">\n              <i className={`fas fa-${vehicle.type === 'CAR' ? 'car' : 'truck'} text-6xl text-blue-400`}></i>\n            </div>\n          )}\n          <div className=\"absolute top-4 left-4 bg-blue-600 text-white px-3 py-1 rounded-full text-sm font-medium\">\n            {vehicle.type === 'CAR' ? 'Auto' : 'Furgone'}\n          </div>\n        </div>\n        \n        <div className=\"p-6\">\n          <h3 className=\"text-xl font-semibold mb-2\" data-testid={`vehicle-name-${vehicle.id}`}>\n            {vehicle.name}\n          </h3>\n          <div className=\"space-y-2 mb-4\">\n            <div className=\"flex items-center text-gray-600\">\n              <i className=\"fas fa-users w-4 mr-2\"></i>\n              <span>{vehicle.seats} posti</span>\n            </div>\n            <div className=\"flex items-center text-gray-600\">\n              <i className=\"fas fa-cog w-4 mr-2\"></i>\n              <span>{vehicle.transmission === 'MANUAL' ? 'Manuale' : 'Automatico'}</span>\n            </div>\n            <div className=\"flex items-center text-gray-600\">\n              <i className=\"fas fa-gas-pump w-4 mr-2\"></i>\n              <span>{vehicle.fuelType === 'GASOLINE' ? 'Benzina' : vehicle.fuelType === 'DIESEL' ? 'Diesel' : 'Elettrica'}</span>\n            </div>\n          </div>\n          \n          <div className=\"border-t pt-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <span className=\"text-2xl font-bold text-blue-600\">€{vehicle.basePriceDay}</span>\n                <span className=\"text-gray-500 ml-1\">/giorno</span>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm text-gray-500\">Disponibili</div>\n                <div className=\"font-semibold text-green-600\">{vehicle.availableQuantity}</div>\n              </div>\n            </div>\n            \n            <button \n              onClick={handleBookClick}\n              className=\"w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors\"\n              data-testid={`vehicle-book-${vehicle.id}`}\n            >\n              <i className=\"fas fa-calendar-plus mr-2\"></i>\n              {isMobile ? 'Chiama per Prenotare' : 'Prenota Ora'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <PhoneModal \n        isOpen={showPhoneModal} \n        onClose={() => setShowPhoneModal(false)} \n      />\n    </>\n  );\n}\n\nexport default function HomePage() {\n  const isMobile = useIsMobile();\n  const [showPhoneModal, setShowPhoneModal] = useState(false);\n\n  const { data: vehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: ['/api/vehicles'],\n  });\n\n  const handlePhoneClick = () => {\n    if (isMobile) {\n      window.location.href = 'tel:+393287153527';\n    } else {\n      setShowPhoneModal(true);\n    }\n  };\n\n  const scrollToVehicles = () => {\n    document.getElementById('vehicles')?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm sticky top-0 z-40\">\n        <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"bg-blue-600 text-white px-3 py-2 rounded-lg font-bold text-lg\">CICO</div>\n            <span className=\"font-medium text-gray-900\">Rent</span>\n          </div>\n\n          <div className=\"hidden md:flex items-center space-x-8\">\n            <a href=\"#home\" className=\"text-gray-700 hover:text-blue-600 font-medium transition-colors\">Home</a>\n            <a href=\"#vehicles\" className=\"text-gray-700 hover:text-blue-600 font-medium transition-colors\">Veicoli</a>\n            <a href=\"#about\" className=\"text-gray-700 hover:text-blue-600 font-medium transition-colors\">Chi Siamo</a>\n            <a href=\"#contact\" className=\"text-gray-700 hover:text-blue-600 font-medium transition-colors\">Contatti</a>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <button \n              onClick={handlePhoneClick}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n              data-testid=\"header-phone-btn\"\n            >\n              <i className=\"fas fa-phone mr-2\"></i>\n              {isMobile ? 'Chiama' : 'Chiamaci'}\n            </button>\n            <button className=\"md:hidden text-gray-600\">\n              <i className=\"fas fa-bars text-xl\"></i>\n            </button>\n          </div>\n        </nav>\n      </header>\n\n      {/* Hero Section */}\n      <section id=\"home\" className=\"cico-gradient text-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"animate-slide-up\">\n              <h1 className=\"text-4xl lg:text-6xl font-bold leading-tight mb-6\">\n                Noleggio Auto<br />\n                <span className=\"text-blue-300\">e Furgoni</span><br />\n                a Roma\n              </h1>\n              <p className=\"text-xl text-blue-100 mb-8 leading-relaxed\">\n                La soluzione più conveniente per i tuoi spostamenti. \n                Veicoli moderni, prezzi competitivi e un servizio clienti d'eccellenza.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <button \n                  onClick={scrollToVehicles}\n                  className=\"bg-white text-blue-800 px-8 py-4 rounded-xl font-semibold hover:bg-blue-50 transition-all transform hover:scale-105 shadow-lg\"\n                  data-testid=\"hero-vehicles-btn\"\n                >\n                  <i className=\"fas fa-car mr-2\"></i>Vedi Veicoli\n                </button>\n                <button \n                  onClick={handlePhoneClick}\n                  className=\"border-2 border-white text-white px-8 py-4 rounded-xl font-semibold hover:bg-white hover:text-blue-800 transition-all\"\n                  data-testid=\"hero-phone-btn\"\n                >\n                  <i className=\"fas fa-phone mr-2\"></i>+39 328 715 3527\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"relative animate-fade-in\">\n              <img \n                src=\"https://images.unsplash.com/photo-1549924231-f129b911e442?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Flotta moderna di veicoli CICO Rent\" \n                className=\"rounded-2xl shadow-2xl w-full h-auto\"\n              />\n              <div className=\"absolute -bottom-6 -left-6 bg-white p-6 rounded-xl shadow-lg animate-scale-in\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-green-100 p-2 rounded-full\">\n                    <i className=\"fas fa-check text-green-600\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-gray-900\">Disponibili Subito</p>\n                    <p className=\"text-gray-600 text-sm\">7 veicoli in flotta</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Vehicles Section */}\n      <section id=\"vehicles\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">La Nostra Flotta</h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Scegli tra auto e furgoni moderni, sempre puliti e pronti per ogni tua esigenza\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {vehicles.map((vehicle) => (\n              <VehicleCard key={vehicle.id} vehicle={vehicle} />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-20 cico-gradient text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">Contattaci</h2>\n            <p className=\"text-xl text-blue-100\">Siamo qui per aiutarti a trovare il veicolo perfetto</p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n            <div className=\"bg-blue-700 bg-opacity-50 rounded-2xl p-8\">\n              <div className=\"bg-white bg-opacity-20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-phone text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Telefono</h3>\n              <p className=\"text-blue-100 mb-4\">Chiamaci per informazioni e prenotazioni</p>\n              <a href=\"tel:+393287153527\" className=\"text-white font-semibold hover:text-blue-200 transition-colors\">\n                +39 328 715 3527\n              </a>\n            </div>\n            \n            <div className=\"bg-blue-700 bg-opacity-50 rounded-2xl p-8\">\n              <div className=\"bg-white bg-opacity-20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-envelope text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Email</h3>\n              <p className=\"text-blue-100 mb-4\">Scrivici per ricevere un preventivo</p>\n              <a href=\"mailto:info@cicorent.it\" className=\"text-white font-semibold hover:text-blue-200 transition-colors\">\n                info@cicorent.it\n              </a>\n            </div>\n            \n            <div className=\"bg-blue-700 bg-opacity-50 rounded-2xl p-8\">\n              <div className=\"bg-white bg-opacity-20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-map-marker-alt text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Indirizzo</h3>\n              <p className=\"text-blue-100 mb-4\">Vieni a trovarci presso la nostra sede</p>\n              <address className=\"text-white font-semibold not-italic\">\n                Via Cristoforo Colombo 1778<br />\n                00127 Roma (Torrino)\n              </address>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"bg-blue-600 px-3 py-2 rounded-lg font-bold text-lg\">CICO</div>\n                <span className=\"font-medium\">Rent</span>\n              </div>\n              <p className=\"text-gray-400 mb-4\">\n                Il tuo partner affidabile per il noleggio di auto e furgoni a Roma.\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                FGS GAS SAS<br />\n                P.IVA/CF 05855791009<br />\n                VIA DI SANT ALESSANDRO 279<br />\n                00131 ROMA (RM)\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Servizi</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Noleggio Auto</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Noleggio Furgoni</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Noleggio Orario</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Consegna a Domicilio</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Informazioni</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Condizioni Generali</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Coperture Assicurative</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">FAQ</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Contatti</h4>\n              <div className=\"space-y-3 text-gray-400\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-phone text-sm\"></i>\n                  <span>+39 328 715 3527</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-envelope text-sm\"></i>\n                  <span>info@cicorent.it</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clock text-sm\"></i>\n                  <span>Lun-Ven 9:00-18:00</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-12 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 CICO Rent. Tutti i diritti riservati.</p>\n          </div>\n        </div>\n      </footer>\n\n      <PhoneModal \n        isOpen={showPhoneModal} \n        onClose={() => setShowPhoneModal(false)} \n      />\n    </div>\n  );\n}","size_bytes":16285},"client/src/pages/VehicleDetailPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Vehicle } from '@shared/schema';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\n// Date utility functions\nfunction formatDate(date: Date): string {\n  return date.toISOString().split('T')[0];\n}\n\nfunction addDays(date: Date, days: number): Date {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nfunction isDateDisabled(date: Date, disabledDates: string[]): boolean {\n  const dateStr = formatDate(date);\n  return disabledDates.includes(dateStr) || date < new Date();\n}\n\n// Single DatePicker Component for both start and end dates\ninterface UnifiedDatePickerProps {\n  startDate: Date | null;\n  endDate: Date | null;\n  onDateSelect: (date: Date, isStartDate: boolean) => void;\n  disabledDates: string[];\n}\n\nfunction UnifiedDatePicker({ startDate, endDate, onDateSelect, disabledDates }: UnifiedDatePickerProps) {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [isSelectingStartDate, setIsSelectingStartDate] = useState(true);\n  \n  const getDaysInMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n  };\n  \n  const getFirstDayOfMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n  };\n  \n  const handleDateClick = (date: Date) => {\n    if (isDateDisabled(date, disabledDates)) return;\n    \n    if (isSelectingStartDate) {\n      // If selecting start date and there's already an end date that's before this date, clear end date\n      if (endDate && date >= endDate) {\n        onDateSelect(date, true);\n        onDateSelect(date, false); // Also set end date to same date initially\n      } else {\n        onDateSelect(date, true);\n      }\n      setIsSelectingStartDate(false);\n    } else {\n      // If selecting end date, ensure it's after start date\n      if (startDate && date >= startDate) {\n        onDateSelect(date, false);\n        setIsSelectingStartDate(true); // Reset to start date selection for next time\n      }\n    }\n  };\n  \n  const days = [];\n  const daysInMonth = getDaysInMonth(currentMonth);\n  const firstDay = getFirstDayOfMonth(currentMonth);\n  \n  // Add empty cells for days before the first day of the month\n  for (let i = 0; i < firstDay; i++) {\n    days.push(<div key={`empty-${i}`} className=\"h-10\"></div>);\n  }\n  \n  // Add days of the month\n  for (let day = 1; day <= daysInMonth; day++) {\n    const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day);\n    const isDisabled = isDateDisabled(date, disabledDates) || (startDate && !isSelectingStartDate && date < startDate);\n    const isStartSelected = startDate && formatDate(date) === formatDate(startDate);\n    const isEndSelected = endDate && formatDate(date) === formatDate(endDate);\n    const isInRange = startDate && endDate && date > startDate && date < endDate;\n    \n    let buttonClass = `h-10 w-10 rounded-lg text-sm font-medium transition-colors `;\n    \n    if (isDisabled) {\n      buttonClass += 'text-gray-300 cursor-not-allowed';\n    } else if (isStartSelected) {\n      buttonClass += 'bg-blue-600 text-white';\n    } else if (isEndSelected) {\n      buttonClass += 'bg-green-600 text-white';\n    } else if (isInRange) {\n      buttonClass += 'bg-blue-100 text-blue-800';\n    } else {\n      buttonClass += 'text-gray-700 hover:bg-blue-50 hover:text-blue-600';\n    }\n    \n    days.push(\n      <button\n        key={day}\n        onClick={() => handleDateClick(date)}\n        disabled={isDisabled || false}\n        className={buttonClass}\n        data-testid={`date-${formatDate(date)}`}\n      >\n        {day}\n      </button>\n    );\n  }\n  \n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  \n  return (\n    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">Seleziona Date</h3>\n          <p className=\"text-sm text-gray-600\">\n            {isSelectingStartDate ? 'Clicca per selezionare la data di inizio' : 'Clicca per selezionare la data di fine'}\n          </p>\n        </div>\n        <div className=\"text-right text-sm\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 bg-blue-600 rounded mr-2\"></div>\n              <span>Inizio</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 bg-green-600 rounded mr-2\"></div>\n              <span>Fine</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center justify-between mb-4\">\n        <button\n          onClick={() => setCurrentMonth(addDays(currentMonth, -30))}\n          className=\"p-2 hover:bg-gray-100 rounded-lg\"\n          data-testid=\"prev-month\"\n        >\n          <i className=\"fas fa-chevron-left text-gray-600\"></i>\n        </button>\n        \n        <h3 className=\"font-semibold text-gray-900\">\n          {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}\n        </h3>\n        \n        <button\n          onClick={() => setCurrentMonth(addDays(currentMonth, 30))}\n          className=\"p-2 hover:bg-gray-100 rounded-lg\"\n          data-testid=\"next-month\"\n        >\n          <i className=\"fas fa-chevron-right text-gray-600\"></i>\n        </button>\n      </div>\n      \n      <div className=\"grid grid-cols-7 gap-1 mb-2\">\n        {['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'].map(day => (\n          <div key={day} className=\"h-10 flex items-center justify-center text-sm font-medium text-gray-500\">\n            {day}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"grid grid-cols-7 gap-1\">\n        {days}\n      </div>\n      \n      {startDate && endDate && (\n        <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n          <div className=\"flex justify-between text-sm\">\n            <span><strong>Dal:</strong> {startDate.toLocaleDateString('it-IT')}</span>\n            <span><strong>Al:</strong> {endDate.toLocaleDateString('it-IT')}</span>\n          </div>\n          <div className=\"text-center mt-2 text-blue-700 font-semibold\">\n            {Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))} giorni\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Package Cards Component\ninterface PackageCardsProps {\n  vehicle: Vehicle;\n  startDate: Date | null;\n  endDate: Date | null;\n  selectedPackage: string;\n  onPackageSelect: (packageType: string) => void;\n}\n\nfunction PackageCards({ vehicle, startDate, endDate, selectedPackage, onPackageSelect }: PackageCardsProps) {\n  if (!startDate || !endDate) {\n    return null;\n  }\n\n  const days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n  const basePrice = parseFloat(vehicle.basePriceDay);\n  \n  const packages = [\n    {\n      id: 'STANDARD_24H',\n      name: 'Giornaliero',\n      description: '24 ore',\n      price: basePrice,\n      multiplier: days\n    },\n    {\n      id: 'THREE_DAYS',\n      name: '3 Giorni',\n      description: 'Sconto 15%',\n      price: Math.max(3, days) >= 3 ? basePrice * 0.85 : basePrice,\n      multiplier: Math.max(3, days)\n    },\n    {\n      id: 'FIVE_DAYS',\n      name: '5 Giorni',  \n      description: 'Sconto 20%',\n      price: Math.max(5, days) >= 5 ? basePrice * 0.80 : basePrice,\n      multiplier: Math.max(5, days)\n    },\n    {\n      id: 'WEEKLY',\n      name: 'Settimanale',\n      description: '7 giorni, sconto 25%',\n      price: basePrice * 0.75,\n      multiplier: 7\n    },\n    {\n      id: 'MONTHLY',\n      name: 'Mensile',\n      description: '30 giorni, sconto 40%',\n      price: basePrice * 0.60,\n      multiplier: 30\n    }\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold text-gray-900\">Scegli il Pacchetto</h3>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n        {packages.map((pkg) => {\n          const isSelected = selectedPackage === pkg.id;\n          const totalPrice = (pkg.price * pkg.multiplier).toFixed(2);\n          \n          return (\n            <button\n              key={pkg.id}\n              onClick={() => onPackageSelect(pkg.id)}\n              className={`p-4 rounded-xl border-2 transition-all text-left ${\n                isSelected \n                  ? 'border-blue-500 bg-blue-50 shadow-md' \n                  : 'border-gray-200 hover:border-blue-300 hover:shadow-sm'\n              }`}\n              data-testid={`package-${pkg.id}`}\n            >\n              <div className=\"text-sm font-semibold text-gray-900 mb-1\">{pkg.name}</div>\n              <div className=\"text-xs text-gray-600 mb-3\">{pkg.description}</div>\n              <div className=\"text-lg font-bold text-blue-600\">€{totalPrice}</div>\n              <div className=\"text-xs text-gray-500\">€{pkg.price.toFixed(2)}/giorno</div>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n// Options Component\ninterface OptionsProps {\n  kmPlan: string;\n  coverage: string;\n  extraDriver: boolean;\n  extraDriverUnder25: boolean;\n  homeDelivery: boolean;\n  homePickup: boolean;\n  onKmPlanChange: (value: string) => void;\n  onCoverageChange: (value: string) => void;\n  onExtraDriverChange: (value: boolean) => void;\n  onExtraDriverUnder25Change: (value: boolean) => void;\n  onHomeDeliveryChange: (value: boolean) => void;\n  onHomePickupChange: (value: boolean) => void;\n}\n\nfunction Options({ \n  kmPlan, coverage, extraDriver, extraDriverUnder25, homeDelivery, homePickup,\n  onKmPlanChange, onCoverageChange, onExtraDriverChange, onExtraDriverUnder25Change, \n  onHomeDeliveryChange, onHomePickupChange \n}: OptionsProps) {\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">Opzioni Noleggio</h3>\n      \n      <div className=\"grid md:grid-cols-2 gap-4 mb-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Piano Km</label>\n          <select\n            value={kmPlan}\n            onChange={(e) => onKmPlanChange(e.target.value)}\n            className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            data-testid=\"km-plan-select\"\n          >\n            <option value=\"KM_100\">100 km/giorno</option>\n            <option value=\"KM_200\">200 km/giorno</option>\n            <option value=\"UNLIMITED\">Km illimitati</option>\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Copertura Assicurativa</label>\n          <select\n            value={coverage}\n            onChange={(e) => onCoverageChange(e.target.value)}\n            className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            data-testid=\"coverage-select\"\n          >\n            <option value=\"BASE\">Base (€500 franchigia)</option>\n            <option value=\"PARTIAL\">Parziale (€200 franchigia) - +€15/giorno</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <label className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            checked={extraDriver}\n            onChange={(e) => onExtraDriverChange(e.target.checked)}\n            className=\"mr-2\"\n            data-testid=\"extra-driver-checkbox\"\n          />\n          <span>Guidatore aggiuntivo (+€5/giorno)</span>\n        </label>\n        \n        {extraDriver && (\n          <label className=\"flex items-center ml-6\">\n            <input\n              type=\"checkbox\"\n              checked={extraDriverUnder25}\n              onChange={(e) => onExtraDriverUnder25Change(e.target.checked)}\n              className=\"mr-2\"\n              data-testid=\"under25-checkbox\"\n            />\n            <span>Guidatore under 25 (+€10/giorno extra)</span>\n          </label>\n        )}\n        \n        <label className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            checked={homeDelivery}\n            onChange={(e) => onHomeDeliveryChange(e.target.checked)}\n            className=\"mr-2\"\n            data-testid=\"delivery-checkbox\"\n          />\n          <span>Consegna a domicilio (+€25)</span>\n        </label>\n        \n        <label className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            checked={homePickup}\n            onChange={(e) => onHomePickupChange(e.target.checked)}\n            className=\"mr-2\"\n            data-testid=\"pickup-checkbox\"\n          />\n          <span>Ritiro a domicilio (+€25)</span>\n        </label>\n      </div>\n    </div>\n  );\n}\n\n// Booking Summary Component\ninterface BookingSummaryProps {\n  quote: any;\n  onBookClick: () => void;\n}\n\nfunction BookingSummary({ quote, onBookClick }: BookingSummaryProps) {\n  if (!quote) return null;\n\n  return (\n    <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-6 sticky top-4\">\n      <h3 className=\"text-lg font-semibold text-blue-900 mb-4\">Riepilogo Prenotazione</h3>\n      <div className=\"space-y-2 text-sm mb-4\">\n        <div className=\"flex justify-between\">\n          <span>Tariffa base ({quote.days || 0} giorni)</span>\n          <span>€{quote.baseTotal || 0}</span>\n        </div>\n        {quote.discountEuro > 0 && (\n          <div className=\"flex justify-between text-green-600\">\n            <span>Sconto multi-giorno ({quote.discountPct || 0}%)</span>\n            <span>-€{quote.discountEuro || 0}</span>\n          </div>\n        )}\n        {(quote.extras || []).map((extra: any, index: number) => (\n          <div key={index} className=\"flex justify-between\">\n            <span>{extra.name}</span>\n            <span>€{extra.price}</span>\n          </div>\n        ))}\n        <hr className=\"border-blue-300\" />\n        <div className=\"flex justify-between font-bold text-lg text-blue-900\">\n          <span>Totale</span>\n          <span>€{quote.total || 0}</span>\n        </div>\n      </div>\n      \n      <button\n        onClick={onBookClick}\n        className=\"w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors\"\n        data-testid=\"book-now-button\"\n      >\n        <i className=\"fas fa-calendar-check mr-2\"></i>\n        INVIA PRENOTAZIONE\n      </button>\n    </div>\n  );\n}\n\n// Booking Modal Component\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n  hasExtraDriver: boolean;\n}\n\nfunction BookingModal({ isOpen, onClose, onSubmit, isLoading, hasExtraDriver }: BookingModalProps) {\n  const [formData, setFormData] = useState({\n    customerFirstName: '',\n    customerLastName: '',\n    customerBirthDate: '',\n    customerPhone: '',\n    customerEmail: '',\n    driverLicenseNo: '',\n    addFirstName: '',\n    addLastName: '',\n    addBirthDate: '',\n    addDriverLicenseNo: '',\n    notes: '',\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Conferma Prenotazione</h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600 text-2xl\"\n              data-testid=\"close-modal\"\n            >\n              &times;\n            </button>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Dati Conducente Principale</h3>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Nome *</label>\n                  <input\n                    type=\"text\"\n                    name=\"customerFirstName\"\n                    value={formData.customerFirstName}\n                    onChange={handleChange}\n                    required\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    data-testid=\"first-name-input\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Cognome *</label>\n                  <input\n                    type=\"text\"\n                    name=\"customerLastName\"\n                    value={formData.customerLastName}\n                    onChange={handleChange}\n                    required\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    data-testid=\"last-name-input\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid md:grid-cols-2 gap-4 mt-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Data di Nascita *</label>\n                  <input\n                    type=\"date\"\n                    name=\"customerBirthDate\"\n                    value={formData.customerBirthDate}\n                    onChange={handleChange}\n                    required\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    data-testid=\"birth-date-input\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Numero Patente *</label>\n                  <input\n                    type=\"text\"\n                    name=\"driverLicenseNo\"\n                    value={formData.driverLicenseNo}\n                    onChange={handleChange}\n                    required\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    data-testid=\"license-input\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid md:grid-cols-2 gap-4 mt-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Telefono *</label>\n                  <input\n                    type=\"tel\"\n                    name=\"customerPhone\"\n                    value={formData.customerPhone}\n                    onChange={handleChange}\n                    required\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    data-testid=\"phone-input\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email *</label>\n                  <input\n                    type=\"email\"\n                    name=\"customerEmail\"\n                    value={formData.customerEmail}\n                    onChange={handleChange}\n                    required\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    data-testid=\"email-input\"\n                  />\n                </div>\n              </div>\n            </div>\n            \n            {hasExtraDriver && (\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4\">Dati Conducente Aggiuntivo</h3>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Nome</label>\n                    <input\n                      type=\"text\"\n                      name=\"addFirstName\"\n                      value={formData.addFirstName}\n                      onChange={handleChange}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      data-testid=\"add-first-name-input\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Cognome</label>\n                    <input\n                      type=\"text\"\n                      name=\"addLastName\"\n                      value={formData.addLastName}\n                      onChange={handleChange}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      data-testid=\"add-last-name-input\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid md:grid-cols-2 gap-4 mt-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Data di Nascita</label>\n                    <input\n                      type=\"date\"\n                      name=\"addBirthDate\"\n                      value={formData.addBirthDate}\n                      onChange={handleChange}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      data-testid=\"add-birth-date-input\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Numero Patente</label>\n                    <input\n                      type=\"text\"\n                      name=\"addDriverLicenseNo\"\n                      value={formData.addDriverLicenseNo}\n                      onChange={handleChange}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      data-testid=\"add-license-input\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Note aggiuntive</label>\n              <textarea\n                name=\"notes\"\n                value={formData.notes}\n                onChange={handleChange}\n                rows={3}\n                className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                data-testid=\"notes-input\"\n              />\n            </div>\n            \n            <div className=\"flex space-x-4\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-400 transition-colors\"\n                data-testid=\"cancel-button\"\n              >\n                Annulla\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"flex-1 bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50\"\n                data-testid=\"submit-booking\"\n              >\n                {isLoading ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Invio in corso...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-check mr-2\"></i>\n                    INVIA\n                  </>\n                )}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function VehicleDetailPage() {\n  const { vehicleId } = useParams<{ vehicleId: string }>();\n  const isMobile = useIsMobile();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [startDate, setStartDate] = useState<Date | null>(null);\n  const [endDate, setEndDate] = useState<Date | null>(null);\n  const [selectedPackage, setSelectedPackage] = useState<string>('STANDARD_24H');\n  const [kmPlan, setKmPlan] = useState<string>('KM_100');\n  const [coverage, setCoverage] = useState<string>('BASE');\n  const [extraDriver, setExtraDriver] = useState(false);\n  const [extraDriverUnder25, setExtraDriverUnder25] = useState(false);\n  const [homeDelivery, setHomeDelivery] = useState(false);\n  const [homePickup, setHomePickup] = useState(false);\n  const [showBookingModal, setShowBookingModal] = useState(false);\n\n  const { data: vehicle } = useQuery<Vehicle>({\n    queryKey: ['/api/vehicles', vehicleId],\n  });\n\n  const { data: availability } = useQuery<{ availableQuantity: number; blackoutDates: string[] }>({\n    queryKey: ['/api/vehicles', vehicleId, 'availability', startDate ? formatDate(startDate) : '', endDate ? formatDate(endDate) : ''],\n    enabled: !!(vehicleId && startDate && endDate),\n  });\n\n  // Get fully booked dates for this vehicle\n  const { data: fullyBookedDates } = useQuery<string[]>({\n    queryKey: ['/api/vehicles', vehicleId, 'fully-booked'],\n    enabled: !!vehicleId,\n  });\n\n  // Fix quote API call by using query string parameters\n  const { data: quote } = useQuery({\n    queryKey: ['/api/quote'],\n    queryFn: async () => {\n      if (!startDate || !endDate) return null;\n      \n      const params = new URLSearchParams({\n        vehicleId: vehicle?.id || '',\n        startDate: formatDate(startDate),\n        endDate: formatDate(endDate),\n        packageType: selectedPackage,\n        kmPlan,\n        coverage,\n        extraDriver: extraDriver.toString(),\n        extraDriverUnder25: extraDriverUnder25.toString(),\n        homeDelivery: homeDelivery.toString(),\n        homePickup: homePickup.toString(),\n      });\n\n      const response = await fetch(`/api/quote?${params.toString()}`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch quote');\n      }\n      \n      return response.json();\n    },\n    enabled: !!(startDate && endDate && vehicle),\n  });\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      const response = await apiRequest('POST', '/api/bookings', bookingData);\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Prenotazione Confermata!\",\n        description: `Codice prenotazione: ${data.booking.bookingCode}. Riceverai una chiamata entro oggi.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n      setShowBookingModal(false);\n      // Redirect to home or confirmation page\n      window.location.href = '/';\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Errore Prenotazione\",\n        description: error.message || \"Si è verificato un errore durante la prenotazione\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDateSelect = (date: Date, isStartDate: boolean) => {\n    if (isStartDate) {\n      setStartDate(date);\n      if (!endDate || date >= endDate) {\n        setEndDate(addDays(date, 1)); // Set end date to next day by default\n      }\n    } else {\n      setEndDate(date);\n    }\n  };\n\n  const handleBookingSubmit = (customerData: any) => {\n    if (!vehicle || !startDate || !endDate || !quote) return;\n    \n    // Clean customer data - remove empty strings and convert to null for optional date fields\n    const cleanedCustomerData = {\n      ...customerData,\n      addBirthDate: customerData.addBirthDate || null,\n      addFirstName: customerData.addFirstName || null,\n      addLastName: customerData.addLastName || null,\n      addDriverLicenseNo: customerData.addDriverLicenseNo || null,\n      notes: customerData.notes || null,\n    };\n    \n    const bookingData = {\n      vehicleId: vehicle.id,\n      startDate: formatDate(startDate),\n      endDate: formatDate(endDate),\n      daysCount: Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)),\n      packageType: selectedPackage,\n      kmPlan,\n      coverage,\n      extraDriver,\n      extraDriverUnder25,\n      homeDelivery,\n      homePickup,\n      ...cleanedCustomerData,\n    };\n    \n    createBookingMutation.mutate(bookingData);\n  };\n\n  if (!vehicle) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <i className=\"fas fa-spinner fa-spin text-4xl text-blue-600 mb-4\"></i>\n          <p className=\"text-gray-600\">Caricamento veicolo...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const disabledDates = [\n    ...(availability?.blackoutDates || []),\n    ...(fullyBookedDates || [])\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <button\n              onClick={() => window.history.back()}\n              className=\"flex items-center text-gray-600 hover:text-blue-600 transition-colors\"\n              data-testid=\"back-button\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Torna alla lista\n            </button>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-blue-600 text-white px-3 py-2 rounded-lg font-bold text-lg\">CICO</div>\n              <span className=\"font-medium text-gray-900\">Rent</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Vehicle Info */}\n        <div className=\"bg-white rounded-2xl shadow-lg overflow-hidden mb-8\">\n          <div className=\"md:flex\">\n            <div className=\"md:w-1/2\">\n              {vehicle.imageUrl ? (\n                <img\n                  src={vehicle.imageUrl}\n                  alt={vehicle.name}\n                  className=\"w-full h-64 md:h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-64 md:h-full flex items-center justify-center bg-gradient-to-br from-blue-100 to-blue-50\">\n                  <i className={`fas fa-${vehicle.type === 'CAR' ? 'car' : 'truck'} text-8xl text-blue-400`}></i>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"md:w-1/2 p-8\">\n              <div className=\"mb-4\">\n                <span className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium\">\n                  {vehicle.type === 'CAR' ? 'Auto' : 'Furgone'}\n                </span>\n              </div>\n              \n              <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">{vehicle.name}</h1>\n              \n              <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                <div className=\"flex items-center text-gray-600\">\n                  <i className=\"fas fa-users w-5 mr-3\"></i>\n                  <span>{vehicle.seats} posti</span>\n                </div>\n                <div className=\"flex items-center text-gray-600\">\n                  <i className=\"fas fa-cog w-5 mr-3\"></i>\n                  <span>{vehicle.transmission === 'MANUAL' ? 'Manuale' : 'Automatico'}</span>\n                </div>\n                <div className=\"flex items-center text-gray-600\">\n                  <i className=\"fas fa-gas-pump w-5 mr-3\"></i>\n                  <span>{vehicle.fuelType === 'GASOLINE' ? 'Benzina' : vehicle.fuelType === 'DIESEL' ? 'Diesel' : 'Elettrica'}</span>\n                </div>\n                <div className=\"flex items-center text-gray-600\">\n                  <i className=\"fas fa-check-circle w-5 mr-3\"></i>\n                  <span>{vehicle.availableQuantity} disponibili</span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-baseline space-x-2\">\n                <span className=\"text-3xl font-bold text-blue-600\">€{vehicle.basePriceDay}</span>\n                <span className=\"text-gray-500\">/giorno</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Package Cards */}\n        <div className=\"mb-8\">\n          <PackageCards\n            vehicle={vehicle}\n            startDate={startDate}\n            endDate={endDate}\n            selectedPackage={selectedPackage}\n            onPackageSelect={setSelectedPackage}\n          />\n        </div>\n\n        {/* Main booking section */}\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Left column */}\n          <div className=\"space-y-6\">\n            {/* Date Selection */}\n            <UnifiedDatePicker\n              startDate={startDate}\n              endDate={endDate}\n              onDateSelect={handleDateSelect}\n              disabledDates={disabledDates}\n            />\n\n            {/* Options */}\n            {startDate && endDate && (\n              <Options\n                kmPlan={kmPlan}\n                coverage={coverage}\n                extraDriver={extraDriver}\n                extraDriverUnder25={extraDriverUnder25}\n                homeDelivery={homeDelivery}\n                homePickup={homePickup}\n                onKmPlanChange={setKmPlan}\n                onCoverageChange={setCoverage}\n                onExtraDriverChange={setExtraDriver}\n                onExtraDriverUnder25Change={setExtraDriverUnder25}\n                onHomeDeliveryChange={setHomeDelivery}\n                onHomePickupChange={setHomePickup}\n              />\n            )}\n          </div>\n          \n          {/* Right column - Booking Summary */}\n          <div>\n            {quote && (\n              <BookingSummary\n                quote={quote}\n                onBookClick={() => setShowBookingModal(true)}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Booking Modal */}\n      <BookingModal\n        isOpen={showBookingModal}\n        onClose={() => setShowBookingModal(false)}\n        onSubmit={handleBookingSubmit}\n        isLoading={createBookingMutation.isPending}\n        hasExtraDriver={extraDriver}\n      />\n    </div>\n  );\n}","size_bytes":35151},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface Vehicle {\n  id: string;\n  name: string;\n  slug: string;\n  type: 'VAN' | 'CAR';\n  basePriceDay: number;\n  quantity: number;\n  colorOptions: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface QuoteInput {\n  vehicleId: string;\n  startDate: string;\n  endDate: string;\n  packageType: 'STANDARD_24H' | 'VAN_4H' | 'VAN_10H' | 'WEEKLY' | 'MONTHLY';\n  kmPlan: 'KM_100' | 'KM_200' | 'UNLIMITED';\n  coverage: 'BASE' | 'PARTIAL';\n  extraDriver: boolean;\n  extraDriverUnder25: boolean;\n  homeDelivery: boolean;\n  homePickup: boolean;\n}\n\nexport interface QuoteResult {\n  total: number;\n  breakdown: {\n    baseWithDiscount: number;\n    km: number;\n    extra: number;\n    delivery: number;\n  };\n  discountEuroShown: number;\n  discountPctShown: number;\n  daysCount: number;\n}\n\nexport interface BookingData {\n  vehicleId: string;\n  startDate: string;\n  endDate: string;\n  daysCount: number;\n  packageType: 'STANDARD_24H' | 'VAN_4H' | 'VAN_10H' | 'WEEKLY' | 'MONTHLY';\n  kmPlan: 'KM_100' | 'KM_200' | 'UNLIMITED';\n  coverage: 'BASE' | 'PARTIAL';\n  extraDriver: boolean;\n  extraDriverUnder25: boolean;\n  homeDelivery: boolean;\n  homePickup: boolean;\n  customerFirstName: string;\n  customerLastName: string;\n  customerBirthDate: string;\n  customerPhone: string;\n  customerEmail: string;\n  driverLicenseNo: string;\n  addFirstName?: string;\n  addLastName?: string;\n  addBirthDate?: string;\n  addDriverLicenseNo?: string;\n  notes?: string;\n}\n\nexport interface Booking {\n  id: string;\n  bookingCode: string;\n  vehicleId: string;\n  startDate: string;\n  endDate: string;\n  daysCount: number;\n  packageType: string;\n  kmPlan: string;\n  coverage: string;\n  extraDriver: boolean;\n  extraDriverUnder25: boolean;\n  homeDelivery: boolean;\n  homePickup: boolean;\n  totalPrice: number;\n  discountEuroShown: number;\n  discountPctShown: number;\n  customerFirstName: string;\n  customerLastName: string;\n  customerBirthDate: string;\n  customerPhone: string;\n  customerEmail: string;\n  driverLicenseNo: string;\n  addFirstName?: string;\n  addLastName?: string;\n  addBirthDate?: string;\n  addDriverLicenseNo?: string;\n  notes?: string;\n  status: 'PENDING' | 'CONFIRMED' | 'CANCELLED';\n  createdAt: string;\n  updatedAt: string;\n  vehicle: Vehicle;\n}\n\nexport interface Employee {\n  id: string;\n  username: string;\n  role: 'STAFF' | 'ADMIN';\n}\n\nexport interface Availability {\n  availableQuantity: number;\n  blackoutDates: string[];\n}\n","size_bytes":2428},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}